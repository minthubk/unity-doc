! GUI スタイル / GUI Style

$$GUI Style$$ は、$$UnityGUI$$ で使用するためのカスタムの属性の集合です。  1 つのGUI スタイルは、UnityGUI $$Control$$ の外観を定義します。

Attach:GuiStyleInspector.png\\
''インスペクタ上の GUI スタイル」

スタイルを複数の制御に追加したい場合、GUI スタイルの代わりに、[[class-GUISkin | GUI Skin]] を使用します。  UnityGUI の詳細については、[[GUI Scripting Guide]] を参照してください。


!! プロパティ

||PROPS
||``Name`` ||このスタイルを参照するのに使用できるテキスト文字列。||
||``Normal`` ||デフォルトの状態の制御の背景画像およびテキスト色。||
||``Hover`` ||制御にマウス カーソルを合わせた時の背景画像およびテキスト色。||
||``Active`` ||制御をクリックした時の背景画像およびテキスト色。||
||``Focused`` ||制御にキーボードの焦点を合わせた時の背景画像およびテキスト色。 ||
||``On Normal`` ||制御が有効化状態にある時の背景画像およびテキスト色。||
||``On Hover`` ||有効な制御にマウス カーソルを合わせた時の背景画像およびテキスト色。 ||
||``On Active`` ||有効な制御をクリックした時のプロパティ。 ||
||``On Focused`` ||有効な制御にキーボードの焦点を合わせた時の背景画像およびテキスト色。||
||``Border`` ||制御の形状のスケールによって影響されない''Background」画像の各側でのピクセル数。||
||``Padding`` ||制御の各端から制御の内容の開始点までのピクセル単位の空白。 ||
||``Margin`` ||このスタイルでレンダリングされる要素とその他の GUI 制御間の余白。 ||
||``Overflow`` ||背景画像に追加される余分な空白。 ||
||``Font`` ||このスタイルですべてのテキストに使用されるフォント。||
||``Image Position`` ||背景画像とテキストの結合のされ方。 ||
||``Alignment`` ||標準のテキスト配置オプション。 ||
||``Word Wrap`` ||有効にすると、制御の境界に達したテキストが次の行に配置されます。||
||``Text Clipping`` ||''Word Wrap」が有効の場合、制御の境界を超えたテキストをどのように扱うを選択します。||
||>>>``Overflow`` ||制御の境界を超えたテキストは境界を超えて表示され続けます。||
||>>>``Clip`` ||制御の境界を超えたテキストは非表示になります。||
||``Content Offset`` ||その他のプロパティの他、内容が移動される X および Y 軸に沿ったピクセル数。||
||>>>``X`` ||左 / 右のオフセット。||
||>>>``Y`` ||上 / 下のオフセット。||
||``Fixed Width`` ||制御の幅のピクセル数で、与えられた''Rect()」値を無効にします。||
||``Fixed Height`` ||制御の幅のピクセル数で、与えられた''Rect()」値を無効にします。||
||``Stretch Width`` ||有効にすると、このスタイルを使用する制御が水平に延長され、レイアウトが改善されます。 ||
||``Stretch Width`` ||有効にすると、このスタイルを使用する制御が垂直に延長され、レイアウトが改善されます。 ||


!! 詳細

GUI スタイルは、スクリプトから宣言され、インスタンスごとに修正されます。  カスタムのスタイルのある 1 つまたは少数の制御を使用したい場合、スクリプトでこのスタイルを宣言し、制御関数の引数として、スタイルを与えることができます。  これにより、これらの制御を定義したスタイルで表示できます。

まず、スクリプト内から GUIスキンスタイルを宣言する必要があります。

[@
/* Declare a GUI Style */
var customGuiStyle : GUIStyle;

...
@]

GameObject にこのスクリプトを追加すると、$$Inspector$$ で修正できるカスタムのスタイルが表示されます。

Attach:ModifyingStyleInInspector.png\\
''スクリプトで宣言されたスタイルは、スクリプトの各インスタンスで修正できます」

特定の制御にこのスタイルを使用するよう指示したい場合に、制御関数の最後の引数として、スタイルの名前を与えます。

[@
...

function OnGUI () {
	// スタイルを使用するために最後の引数として、スタイルの名前を与えます
	GUILayout.Button ("私はカスタム スタイルのボタンです"、customGuiStyle);

	// スタイルを適用したくない場合は、名前を渡さないでください
	GUILayout.Button ("私はカスタム スタイルなしの通常の UnityGUI ボタンです");
}
@]

Attach:guiStyle-TwoButtonsOneIsStyled.png\\
''コードのサンプルで作成されたように、2 つのボタンで、1 つはスタイルあり''

UnityGUI の使用に関する詳細については、[[GUI Scripting Guide]] を参照してください。

