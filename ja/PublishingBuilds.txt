! ビルドの公開 / Publishing Builds

ゲーム作成中、ゲームを作成し、スタンドアロンまたはウェブ プレイヤーとして、エディタの外部で実行する際、常時どのように見えるかを確認したい場合があるでしょう。  本項では、$$Build Settings$$ へのアクセス方法およびゲームの各種ビルドの作成方法について説明します。

^^File->Build Settings...^^ は、ビルド設定ウィンドウにアクセスするためのメニュー項目です。  ゲーム作成時に含まれるシーンの編集可能なリストがポップアップ表示されます。


Attach:BuildSettings34.png\\
''ビルド設定ウィンドウ''


最初にプロジェクトでこのウィンドウを開くと、空に見えます。  このリストが空のままで、ゲームを作成すると、現在開いているシーンのみがビルドに含まれます。  1 つのシーン ファイルだけでテスト プレイヤーを素早く作成したい場合は、空のシーン リストでプレイヤーを作成します。

マルチシーンビルドでこのリストにシーン ファイルを追加するのは簡単です。  次の 2 種類の追加方法があります。  まず、^^Add Current^^ ボタンをクリックします。  リストに現在開いているシーンが表示されます。  次に、シーン ファイルを追加するには、 $$Project View$$ からリストにファイルをドラッグします。

この時点までに、シーンによってインデックス値が異なります。  $$Scene 0$$ は、ゲーム ビルド時にロードされる最初のシーンです。  新しいシーンをロードするには、スクリプト内で [[ScriptRef:Application.LoadLevel.html|Application.LoadLevel()]] を使用します。

複数のシーン ファイルを追加し、再配置したい場合、希望の順序になるまで、上記のリストまたは下記のその他でシーンをクリックし、ドラッグするだけです。

リストからシーンを削除したい場合は、クリックしてシーンを強調表示し、^^Command-Delete^^ を押します。  リストからシーンが消え、ビルドに含まれなくなります。

ビルドをパブリッシュする準備ができたら、$$Platform$$ を選択し、Unity のロゴがプラットフォームの隣にあるか確認します。ない場合は、^^Switch Platform^^ ボタンをクリックして、Unity に作成したいプラットフォームを知らせます。 最後に、^^Build^^ ボタンを押します。 標準の保存ダイアログを使用して、ゲームに名前と位置を選択できるようになります。 ^^Save^^ をクリックすると、Unity がゲームをすぐに作成します。 これは非常にシンプルです。 作成したゲームをどこに保存すべきか分からない場合は、プロジェクトのルート フォルダに保存することを検討してください。  Assets フォルダにはビルドを保存できません。

スタンドアロン プレイヤーで $$Development Build$$ チェックボックスを有効にすると、[[ScriptRef:Profiler.html|Profiler]] 機能が有効になり、画面上で Autoconnect Profiler および Script Debugging オプションが有効になります。

!Desktop!
>>Desktop<<
!! ウェブプレイヤーのストリーミング

ストリーミング ウェブ プレイヤーにより、シーン 0 がロードを終了するとすぐに、ウェブ プレイヤー ゲームがプレイを開始できるようになります。  10 のレベルのあるゲームの場合、レベル 1 のプレイを開始する前に、プレイヤーに待機させ、レベル 2 - 10 にすべてのアセットをダウンロードサせる意味はありません。ストリーミング ウェブ プレイヤーのパブリッシュ時に、ダウンロードする必要のあるアセットが、表示される $$Scene$$ ファイルの順に並べ替えられます。シーン 0 内のすべてのアセットのダウンロードが終了すると、ウェブ プレイヤーはプレイを開始します。

簡単に言うと、ストリーミング ウェブ プレイヤーにより、プレイヤーはこれまでよりも速くゲームをプレイできます。

唯一心配すべきことは、ロードする前に、ロードしたい次のレベルのストリーミングが終了したか確認することです。

通常、非ストリーム プレイヤーでは、次のコードを使用して、レベルをロードします。

[@
Application.LoadLevel("levelName");
@]

通常、ストリーミング ウェブ プレイヤーでは、最初にレベルのストリーミングが終了したかを確認する必要があります。  これは、[[ScriptRef:Application.CanStreamedLevelBeLoaded.html | CanStreamedLevelBeLoaded()]] 関数を使用して行われます。  これは次のように機能します。

[@
var levelToLoad = 1;

function LoadNewLevel () {
	if (Application.CanStreamedLevelBeLoaded (levelToLoad)) {
		Application.LoadLevel (levelToLoad);
	}
}
@]

ローディング バーやその他の表示に対して、プレイヤーにレベルのストリーミングの進捗を表示したい場合、[[ScriptRef:Application.GetStreamProgressForLevel.html | GetStreamProgressForLevel()]] にアクセスして進捗を読み取ることができます。

!! オフライン ウェブ プレイヤーの配備

Offline Deployment オプションがウェブ プレイヤーに対して有効になると、作成中、UnityObject.js ファイル (プレイヤーとホスト ページとを結びつけるのに使用されます) が、 プレイヤーと平行して配置されます。 これにより、ネットワークに接続していなくても、プレイヤーはローカルのスクリプト ファイルで作業できます。通常、UnityObject.js は、最新バージョンが使用できる使用できるようにするため、Unity のウェブサーバーからダウンロードされます。

!! スタンドアロン プレイヤーの作成

Unity では、Windows および Mac 向けのスタンドアロン アプリケーションを作成できます (両方のアーキテクチャで実行する Intel、PowerPC または Universal)。 ビルド設定ダイアログでビルド対象を選択し、''Build''ボタンを押すのは簡単です。
スタンドアロン プレイヤー作成時に、結果生じるファイルは、ビルド対象によって変わります。 Windows では、アプリケーションのすべてのリソースを含む Data フォルダと共に、実行可能なファイル (.exe) が作成されます。 Mac では、リソースの他、アプリケーションの実行に必要なファイルを含む、app bundle が作成されます。

Mac でのスタンドアロンの配布は、app bundle を配布するだけです (すべてがそこに含まれています)。 Windows では、.exe ファイルと他がそれを実行するための Data フォルダの両方を提供する必要があります。 これは、以下のように考えてください。 その他の人々は、ゲームを実行するために、Unity が作成するファイルとして、コンピュータ上に同じファイルを持つ必要があります。

!! ビルド処理内

作成処理は、指定した任意の場所に作成したゲーム アプリケーションの空のコピーを置きます。 次に、これがビルド設定内のシーン リストを処理し、エディタで一度に 1 つ開いて、最適化し、アプリケーション パッケージの統合します。 また、含まれているシーンが必要とするすべてのアセットを計算し、アプリケーション パッケージ内に個々のファイルを格納します。

* ''EditorOnly''というタグのついたシーン内の $$GameObject$$ は、パブリッシュされたビルドには含まれません。 これは、最終的なゲームに含める必要のない、スクリプトのデバッグに便利です。

* 新しいレベルのロード時、前のレベルの全オブジェクトが破棄されます。 これを防ぐには、破棄したくないオブジェクトで、 [[ScriptRef:Object.DontDestroyOnLoad.html|DontDestroyOnLoad()]] を使用します。 これは、レベルのロード時に音楽の再生を続ける場合や、ゲームの状態や進捗を維持するゲーム コントローラ スクリプトに通常使用されます。

* 新しいレベルのロード終了後に、 [[ScriptRef:MonoBehaviour.OnLevelWasLoaded.html|OnLevelWasLoaded()]] というメッセージがすべてのアクティブなゲーム オブジェクトに送信されました。
* 複数のシーン (例えば、メイン メニュー、ハイスコア画面、実際のゲーム レベルなど) で最適にゲームを作成する方法の詳細については、Scripting Tutorial.pdf を参照してください。
>><<
!iOS!
>>ios<<
!! iOS ビルド処理内

iPhone/iPad アプリケーション ビルド処理には、次の 2 つの手順があります。 
# XCode プロジェクトが必要なすべてのライブラリ、プレコンパイルされた .NET コードおよび直列化されたアセットと共に生成されます。
# XCode プロジェクトが作成され、実機に配備されます。

''ビルド設定''ダイアログで''作成''を押すと、最初の手順のみ達成されます。 エディタで''作成''と''実行''を押すと、両方の手順が行われます。
プロジェクト保存ダイアログで、ユーザーが既存のフォルダを選択すると、警告が表示されます。 現在、次の 2 つの XCode プロジェクト生成モードを選択できます。 
* ``replace`` - 対象フォルダからのファイルはすべて削除され、新しい内容が作成されます。
* ``append`` - ''Data''、''Libraries''およびプロジェクト のルート フォルダが一掃され、新たに生成された内容で満たされます。 XCode プロジェクト ファイルは、最新の Unity のプロジェクト 変更に応じて更新されます。 XCode プロジェクトの''Classes''サブフォルダは、カスタムのネイティブ コードを置く安全な場所として考えることができますが、通常のバックアップを作成することをお勧めします。 Append モードは、同じ Unity iOS で生成された既存の XCode プロジェクトに対してのみサポートされています。

Cmd+B を押すと、自動作成および実行処理が呼び出され、最新の使用されたフォルダがビルド対象とみなされます。 この場合、''append''モードはデフォルトとみなされます。 
>><<

[[#Android]]
!Android!
>>android<<
Android アプリケーション ビルド処理には、次の 2 つの手順があります。 
# アプリケーション パッケージ (.apk ファイル) が必要なすべてのライブラリ、プレコンパイルされた .NET コードおよび直列化されたアセットと共に生成されます。
# アプリケーション パッケージが作成され、実機に配備されます。

''ビルド設定''ダイアログで''作成''を押すと、最初の手順のみ達成されます。 ディタで''作成''と''実行''を押すと、両方の手順が行われます。
Cmd+B を押すと、自動作成および実行処理が呼び出され、最新の使用されたフォルダがビルド対象とみなされます。 

最初に Android プロジェクトを作成する際に、Unity によって Android SDK を置くように求められます。これは、機器に Android アプリケーションを作成し、インストールするのに必要になります。
この設定は、^^Preferences^^ で後で変更できます。

Attach:unity-preferences.png

Android にアプリケーションを作成する際、機器設定で、''USB Debugging''および''Allow mock locations''チェックボックスにチェックが入っていることを確認してください。

Attach:android-device-dev.png

@@Android SDK/platform-tools@@ フォルダにある @@adb devices@@ コマンドを実行することで、OS は機器を確認できます。
これは、Windows と Mac プロジェクト ファイルの両方に機能します。

Attach:adb-devices.png

Unity は、アプリケーション アーカイブ (.apk ファイル) を作成し、接続された機器にインストールします。
アプリケーションが、iPhone 上などで自動起動できない場合があるため、画面のロックを解除する必要があります。新たにインストールされたアプリケーションがメニューに表示される場合も稀にあります。

!!テクスチャ圧縮

$$Build Settings$$ 下に、^^Texture Compression^^ オプションがあります。 デフォルトでは、Unity は、個々のテクスチャ形式の無効のないテクスチャに対しては、[ Main.android-GettingStarted | ETC1/RGBA16 ]] テクスチャ形式を使用します ([[ Main.class-Texture2D | Texture 2D / Per-Platform Overrides]] 参照)。

特定のハードウェア アーキテクチャを対象に、アプリケーション アーカイブ (.apk ファイル) を作成したい場合、^^Texture Compression^^ オプションを使用して、このデフォルトの動作を無効にできます。
圧縮されていないテクスチャはそのままにされます。つまり、圧縮フォーマットのテクスチャだけ ^^Texture Compression^^ オプションで選択されたフォーマットを使います。

アプリケーションが選択したテクスチャ圧縮をサポートしている機器でのみに配備サせたい場合、Unity は、[[ http://developer.android.com/guide/topics/manifest/supports-gl-texture-element.html | AndroidManifest ]] を編集して、選択した特定の形式に一致するタグを含めることができます。
これにより、Android Market のフィルタリング機構が、適切なグラフィック ハードウェアを搭載した機器にのみアプリケーションを提供します。


>><<

!!プレロード

パブリッシュされたビルドは、シーンのロード時にシーン内のすべてのアセットを自動的にプレロードします。 このルールの例外は、シーン 0 です。これは、最初のシーンが通常、できるだけ速く表示したいであろうスプラッシュ画面であるためです。

すべての内容がプレロードされるようにするため、''Application.LoadLevel(1)''を呼び出す空のシーンを作成できます。 ビルド設定で、この空のシーンのインデックスを 0 にします。続くレベルはすべてプレロードされます。

!!ゲーム作成の準備ができました。

これまで、Unity のインターフェースの使い方、アセットの使い方、シーンの作成法およびビルドのパブリッシュ法を学んできました。 理想のゲーム作成を邪魔するものはありません。 途中更に多くのことを学ぶことになりますが、ここではそのお手伝いをします。

Unity 自体の使用の詳細については、[[Building Scenes|ここで引き続きマニュアルを読む]] か、[[Tutorials]] に従ってください。

ゲームの動作の基本であるコンポーネントの詳細については、[[Components|Component Reference]] を参照してください。

スクリプティングの詳細については、[[ScriptRef:index.html|Scripting Reference]] を参照してください。

アート アセットの作成の詳細については、本マニュアルの [[Asset Import and Creation | Assets のセクション]] を参照してください。

Unity ユーザーや開発者のコミュニティに参加したい場合は、[[http://forum.unity3d.com|Unity Forums]] にアクセスしてください。  ここでは、質問やプロジェクトの共有、チームの作成などを行えます。あなたの作成した素晴らしいゲームを見たいので、ぜひ 1 度はフォーラムに参加してください。

