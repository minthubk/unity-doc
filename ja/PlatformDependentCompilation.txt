!プラットフォーム依存コンパイル / Platform Dependent Compilation

Unity には "プラットフォーム依存コンパイル" という機能があります。これにはいくつかのプリプロセッサ ディレクティブが含まれ、スクリプトを 'パーティション化' して、コードの一部セクションをサポートされているプラットフォーム独自に実行できるようになります。

さらに、コードをエディタ内で実行することが出来るので、コードをモバイル／コンソール特有にコンパイルしたうえでエディタでテストすることが出来ます。

!! プラットフォーム マクロ定義
Unity がスクリプトでサポートしているプラットフォーム マクロ定義:

||PROPS
||``UNITY_EDITOR`` ||ゲームコードからUnity エディタ スクリプトをコールするプラットフォーム マクロ定義。||
||``UNITY_STANDALONE_OSX`` ||Mac OS （Univeral, PPC, およびIntel アーキテクチャ含む）特有でコードのコンパイル／実行のためのプラットフォーム マクロ定義。||
||``UNITY_DASHBOARD_WIDGET`` ||Mac OS ダッシュボード ウィジェットのコードのコンパイル／実行のためのプラットフォーム マクロ定義。||
||``UNITY_STANDALONE_WIN`` ||Windows スタンドアローン アプリケーションのコードをコンパイル／実行したいときに使用します。||
||``UNITY_STANDALONE_LINUX`` ||Linux スタンドアローン アプリケーションのコードをコンパイル／実行したいときに使用します。||
||``UNITY_STANDALONE`` ||あらゆる スタンドアローン アプリケーション（Mac, Windows, または Linux）のコードをコンパイル／実行したいときに使用します。||
||``UNITY_WEBPLAYER`` ||Web Player コンテンツ（Windows および Mac Web Player実行ファイルを含みます）のプラットフォーム マクロ定義。||
||``UNITY_WII`` ||Wii コンソールでコードのコンパイル／実行のためのプラットフォーム マクロ定義。||
||``UNITY_IPHONE`` ||iPhone プラットフォームでコードのコンパイル／実行のためのプラットフォーム マクロ定義。||
||``UNITY_ANDROID`` ||Android プラットフォームのプラットフォーム マクロ定義。||
||``UNITY_PS3`` ||PlayStation 3 でコードのコンパイル／実行のためのプラットフォーム マクロ定義。||
||``UNITY_XBOX360`` ||XBox 360 でコードのコンパイル／実行のためのプラットフォーム マクロ定義。||
||``UNITY_NACL`` ||Google ネイティブ クライアント でコードのコンパイル／実行のためのプラットフォーム マクロ定義。(``UNITY_WEBPLAYER`` に加えてセットします)。||
||``UNITY_FLASH`` ||Adobe Flashでコードのコンパイル／実行のためのプラットフォーム マクロ定義。 ||
||``UNITY_BLACKBERRY`` ||Blackberry10 デバイス のためのプラットフォーム マクロ定義。||

さらに作業を行っている Unity エンジンのバージョンに基づいてコードを選択的にコンパイルできます。現在サポートされているのは：

||``UNITY_2_6`` ||Unity 2.6 バージョンのプラットフォーム マクロ定義。||
||``UNITY_2_6_1`` ||Unity 2.6.1 バージョンのプラットフォーム マクロ定義。||
||``UNITY_3_0`` ||Unity 3.0 バージョンのプラットフォーム マクロ定義。||
||``UNITY_3_0_0`` ||Unity 3.0.0 バージョンのプラットフォーム マクロ定義。||
||``UNITY_3_1`` ||Unity 3.1 バージョンのプラットフォーム マクロ定義。||
||``UNITY_3_2`` ||Unity 3.2 バージョンのプラットフォーム マクロ定義。||
||``UNITY_3_3`` ||Unity 3.3 バージョンのプラットフォーム マクロ定義。||
||``UNITY_3_4`` ||Unity 3.4 バージョンのプラットフォーム マクロ定義。||
||``UNITY_3_5`` ||Unity 3.5 バージョンのプラットフォーム マクロ定義。||
||``UNITY_4_0`` ||Unity 4.0 バージョンのプラットフォーム マクロ定義。||
||``UNITY_4_0_1`` || Unity 4.0.1 バージョンのプラットフォーム マクロ定義。||
||``UNITY_4_1`` ||Unity 4.1 バージョンのプラットフォーム マクロ定義。||

__注意:__ 2.6.0 で初めて導入された機能であるため、それより前のバージョンではプラットフォーム マクロ定義はありません。

!!プリコンパイル コードのテスト

プリコンパイル コードをどうやって使用するか簡単なサンプルを示します。これは選択したビルド ターゲットのプラットフォームにもとづいてメッセージを単に出力します。

まず初めに、コードをテストしたいプラットフォームを選択するために ^^File __->__ Build Settings^^ をクリックします。これにより ターゲット プラットフォームを選択する Build Settings ウィンドウが表示されます。

Attach:BuildSettings.png\\
''ターゲットのプラットフォームとして Web Playerを選択した Build Settings ウィンドウ''

プリコンパイル コードをテストしたいプラットフォームを選択して、 ^^Switch Editor^^ を押下し、Unity にどのプラットフォームをターゲットにするのか Unity に知らせます。

スクリプトを作成し、次のコードをコピー＆ペーストします:


[@
// JavaScript サンプル
function Awake() {
  #if UNITY_EDITOR
    Debug.Log("Unity エディタ");
  #endif
	
  #if UNITY_IPHONE
    Debug.Log("iPhone");
  #endif

  #if UNITY_STANDALONE_OSX
    Debug.Log("スタンドアローン Mac OSX");
  #endif

  #if UNITY_STANDALONE_WIN
    Debug.Log("スタンドアローン Windows");
  #endif	
}
@]


[@
//C# サンプル
using UnityEngine;
using System.Collections;

public class PlatformDefines : MonoBehaviour {
  void Start () {

    #if UNITY_EDITOR
      Debug.Log("Unity エディタ");
    #endif
    
    #if UNITY_IPHONE
      Debug.Log("iPhone");
    #endif

    #if UNITY_STANDALONE_OSX
	Debug.Log("スタンドアローン Mac OSX");
    #endif

    #if UNITY_STANDALONE_WIN
      Debug.Log("スタンドアローン Windows");
    #endif

  }			   
}
@]


[@
// Boo サンプル
import UnityEngine

class PlatformDefines (MonoBehaviour): 

	def Start ():
		ifdef UNITY_EDITOR:
			Debug.Log("Unity エディタ")

		ifdef UNITY_IPHONE:
			Debug.Log("iPhone")

		ifdef UNITY_STANDALONE_OSX:
			Debug.Log("スタンドアローン Mac OSX")

		ifdef not UNITY_IPHONE:
			Debug.Log("iPhoneではありません")

@]


次に、どのプラットフォームを選択したかによって、再生したときにいずれかのメッセージが Unity コンソール に出力されます。

基本的な ''#if'' コンパイラ ディレクティブに加えて、C# および JavaScript のどちらでも次のとおりにテストできます:-

[@
#if UNITY_EDITOR
    Debug.Log("Unity エディタ");
#elif UNITY_IPHONE
    Debug.Log("Unity iPhone");
#else
    Debug.Log("その他のプラットフォーム");
#endif
@]

しかし、Boo は現在 ''ifdef'' ディレクティブのみサポートします。

!! プラットフォームのカスタム定義

ビルトインのセレクションに自身のカスタム定義のを追加することが出来ます。 [[class-PlayerSettings|Player Settings]] の $$Other Settings$$ により、 Scripting Define Symbols テキストボックスが表示されています。

Attach:ScriptDefines.png

ここで特定プラットフォームで定義したいシンボルの名前を入力して、セミコロンで区切ることが出来ます。これらのシンボルは、ビルトインのものと同様に ''#if'' ディレクティブの条件として使用できます。

!! グローバルのカスタム定義

自身のカスタムのプリプロセッサ ディレクティブを定義して、コンパイル時にどのコードを include するか制御することが出来ます。これを行うためには追加のディレクティブを含んだテキストファイルを "Assets/" フォルダに追加します。ファイルの名前は使用している言語に依存し、拡張子は __.rsp__ です:

||C#||@@&lt;Project Path&gt;/Assets/smcs.rsp@@||
||C# - Editor Scripts||@@&lt;Project Path&gt;/Assets/gmcs.rsp@@||
||UnityScript||@@&lt;Project Path&gt;/Assets/us.rsp@@||
||Boo||@@&lt;Project Path&gt;/Assets/boo.rsp@@||

例として、もし __smcs.rsp__ に "@@-define:UNITY_DEBUG@@" を一行含めれば、 @@UNITY_DEBUG@@ の定義は C# スクリプトにおいて、エディタスクリプトを除いてグローバルのカスタム定義として存在することになります。

.rsp ファイルに変更を行うたびに、有効化するためには再コンパイルを行う必要があります。これを行うためには単独のスクリプトファイル（.js, .cs または .boo）を更新または再インポートします。

グローバル定義のみ修正したい場合、全てのコンパイラをカバーするために [[class-PlayerSettings|Player Settings]] の  $$Scripting Define Symbols$$ を修正すべきです。もし代わりに .rsp の変更を選択した場合、Unityが使用するコンパイラごとにひとつのファイルを提供する必要があり、どれかのコンパイラがしようされているかどうか知ることができません。

.rsp ファイルの使用方法についてはインストールした Editor フォルダに含まれる __smcs__ アプリケーションの help セクションに説明があります。詳細な説明については  "@@smcs -help@@" を実行して下さい。さらに .rsp ファイルは実行する前にコンパイラをマッチングする必要があることに留意して下さい。例えば、ウェブプレイヤーがターゲットである場合、 __smcs__ は smcs.rsp とともに使用され、スタンドアローンプレイヤーの場合は __gmcs__ は gmcs.rsp とともに使用され、MS コンパイラの場合は __csc__ は csc.rsp とともに使用する、などとします。
