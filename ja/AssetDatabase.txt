! アセットデータベース / AssetDatabase

AssetDatabaseはプロジェクトのアセットにアクセスできる API です。アセットを見つけてロードするメソッドがあり、さらにアセットを作成、削除、修正できるメソッド等々があります。 Unity エディタ は AssetDatabase を使用して内部的にアセットファイルをトラッキングして、アセットおよびそれを参照するオブジェクトのリンクを保持します。Unityはプロジェクトフォルダへの全ての変更をトラッキングする必要があるため、 アセットデータをアクセスまたは修正した場合はファイルシステムではなくAssetDatable API をつねに使用すべきです。

AssetDatabaseインタフェースはエディタでのみ利用可能であり、ビルドされたプレーヤーでは関数がありません。その他のエディタ クラス と同様、Editor フォルダに置かれたスクリプトのみに対して利用可能です（プロジェクトにすでにない場合、"Editor" フォルダをメインのAssetsフォルダの中に作成します。）

!! アセットのインポート

Unity は通常プロジェクトにドラッグ＆ドロップしたときにアセットを自動的にインポートしますが、スクリプトにより制御してインポートすることが出来ます。このためには [[ScriptRef:AssetDatabase.ImportAsset.html|AssetDatabase.ImportAsset]] メソッドを以下のサンプルのように使用できます。

[@using UnityEngine;
using UnityEditor;

public class ImportAsset {
	[MenuItem ("AssetDatabase/ImportExample")]
	static void ImportExample ()
	{
		AssetDatabase.ImportAsset("Assets/Textures/texture.jpg", ImportAssetOptions.Default);
	}
}@]

さらに AssetDatabase.ImportAsset コールに追加の引数として [[ScriptRef:ImportAssetOptions.html|AssetDatabase.ImportAssetOptions]] の型を渡すことが出来ます。スクリプティング リファレンスのドキュメントで様々なオプションおよび関数の動作について説明します。


!! アセットのロード

エディタはアセットを必要な場合にのみロードします。例えばシーンに追加したり、またはインスペクタ パネルから編集した場合など、です。しかしアセットをスクリプトからロードおよびアクセスするには [[ScriptRef:AssetDatabase.LoadAssetAtPath.html|AssetDatabase.LoadAssetAtPath]], [[ScriptRef:AssetDatabase.LoadMainAssetAtPath.html|AssetDatabase.LoadMainAssetAtPath]] 、  [[ScriptRef:AssetDatabase.LoadAllAssetRepresentationsAtPath.html|AssetDatabase.LoadAllAssetRepresentationsAtPath]] 、および [[ScriptRef:AssetDatabase.LoadAllAssetsAtPath .html|AssetDatabase.LoadAllAssetsAtPath ]] を使用します。詳細についてはスクリプティング ドキュメントを参照下さい。

[@using UnityEngine;
using UnityEditor;

public class ImportAsset {
	[MenuItem ("AssetDatabase/LoadAssetExample")]
	static void ImportExample ()
	{
		Texture2D t = AssetDatabase.LoadAssetAtPath("Assets/Textures/texture.jpg", typeof(Texture2D)) as Texture2D;
	}
}@]


!! AssetDatabase を用いたファイルの処理

Unity はアセットファイルのメタデータを保持するため、絶対にファイルシステムを使用して作成、移動、削除をするべきではありません。その代わりに [[ScriptRef:AssetDatabase.Contains.html|AssetDatabase.Contains]] 、 [[ScriptRef:AssetDatabase.CreateAsset.html|AssetDatabase.CreateAsset]], [[ScriptRef:AssetDatabase.CreateFolder.html|AssetDatabase.CreateFolder]] 、 [[ScriptRef:AssetDatabase.RenameAsset.html|AssetDatabase.RenameAsset]], [[ScriptRef:AssetDatabase.CopyAsset.html|AssetDatabase.CopyAsset]] 、 [[ScriptRef:AssetDatabase.MoveAsset.html|AssetDatabase.MoveAsset]] 、 [[ScriptRef:AssetDatabase.MoveAssetToTrash.html|AssetDatabase.MoveAssetToTrash]] 、および [[ScriptRef:AssetDatabase.DeleteAsset.html|AssetDatabase.DeleteAsset]] を使用すべきです。


[@public class AssetDatabaseIOExample {
	[MenuItem ("AssetDatabase/FileOperationsExample")]
	static void Example ()
	{
		string ret;
		
		// 作成
		Material material = new Material (Shader.Find("Specular"));
		AssetDatabase.CreateAsset(material, "Assets/MyMaterial.mat");
		if(AssetDatabase.Contains(material))
			Debug.Log("マテリアル アセットが作成されました");
		
		// リネーム
		ret = AssetDatabase.RenameAsset("Assets/MyMaterial.mat", "MyMaterialNew");
		if(ret == "")
			Debug.Log("マテリアル アセット MyMaterialNew にリネームしました");
		else
			Debug.Log(ret);
		
		// フォルダを作成
		ret = AssetDatabase.CreateFolder("Assets", "NewFolder");
		if(AssetDatabase.GUIDToAssetPath(ret) != "")
			Debug.Log("assetフォルダが作成されました");
		else
			Debug.Log("そのパスで GUID が見つかりませんでした");
		
		// 移動
		ret = AssetDatabase.MoveAsset(AssetDatabase.GetAssetPath(material), "Assets/NewFolder/MyMaterialNew.mat");
		if(ret == "")
			Debug.Log("マテリアル アセットをNewFolder/MyMaterialNew.matに移動しました");
		else
			Debug.Log(ret);
		
		// コピー
		if(AssetDatabase.CopyAsset(AssetDatabase.GetAssetPath(material), "Assets/MyMaterialNew.mat"))
			Debug.Log("マテリアル アセットをAssets/MyMaterialNew.matとしてコピーしました");
		else
			Debug.Log("マテリアルをコピーできませんでした");
		// Manually refresh the Database to inform of a change
		AssetDatabase.Refresh();
		Material MaterialCopy = AssetDatabase.LoadAssetAtPath("Assets/MyMaterialNew.mat", typeof(Material)) as Material;
		
		// ゴミ箱に移動
		if(AssetDatabase.MoveAssetToTrash(AssetDatabase.GetAssetPath(MaterialCopy)))
			Debug.Log("MaterialCopy アセットをゴミ箱に移動しました");
		
		// 削除
		if(AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(material)))
			Debug.Log("マテリアル アセットを削除しました");
		if(AssetDatabase.DeleteAsset("Assets/NewFolder"))
			Debug.Log("NewFolder を削除しました");
		
		// 全ての変更の後に AssetDatabase をリフレッシュ
		AssetDatabase.Refresh();
	}
}@]


!! AssetDatabase.Refresh の使用

アセットの修正が終わったら、AssetDatabase.Refresh をコールしてデータベースに変更をコミットしてプロジェクトで見えるようにします。
