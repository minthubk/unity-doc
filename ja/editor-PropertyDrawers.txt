! プロパティ ドローア / Property Drawers

``Property Drawers`` を使用して ~~Inspector~~ の特定のコントロールをカスタマイズするために、スクリプトの属性を使用するか、特定の ``Serializable`` クラスの外見を制御できます。


Property Drawer には二つの使用場面があります：
* Serializable クラス の全インスタンスの GUI をカスタマイズする
* カスタムの ``Property Attributes`` 付きのスクリプト メンバーの GUI をカスタマイズする


!! Serializable クラスの GUI をカスタマイズする

カスタム ``Serializable`` クラスにおいて、 ``Property Drawer`` を使用して ~~Inspector~~ での外見を制御できます。次の Serializable クラス である Ingredient で考えてみます：

[@
// これはエディタ スクリプトではありません

// JavaScript サンプル
enum IngredientUnit { Spoon, Cup, Bowl, Piece }

// カスタムの Serializable クラス
class Ingredient extends System.Object {
	var name : String;
	var amount : int = 1;
	var unit : IngredientUnit;
}

var potionResult : Ingredient;
var potionIngredients : Ingredient[];

function Update () {
	// 更新ロジックをここに記述
}



// C# サンプル
using UnityEngine;
using System.Collections;


// これはエディタ スクリプトではありません

public enum IngredientUnit { Spoon, Cup, Bowl, Piece }

// カスタムの Serializable クラス
[System.Serializable]
public class Ingredient : System.Object {
	string name;
	int amount = 1;
	IngredientUnit unit;
}

public class Recipe : MonoBehaviour {
	Ingredient potionResult;
	Ingredient[] potionIngredients;

	void Update() {
	// 更新ロジックをここに記述
	}
}
@]

カスタムの Property Drawer を使用して、インスペクタ上の Ingredient クラスの外見を変更できます。カスタムの Property Drawer の有無によるインスペクタ上のプロパティの外見を比較してください：

Attach:CustomPropertyDrawer_Class.png
''インスペクタ上のクラスがない場合（左）と、ある場合（右）でのカスタム Property Drawer。''

Serializable クラスに Property Drawer をアタッチするには ``CustomPropertyDrawer`` 属性を使用して Drawer となっている Serializable クラスの種類を渡します。

[@
// JavaScript サンプル
@CustomPropertyDrawer (Ingredient)
class IngredientDrawer extends PropertyDrawer {
	
	// 指定した四角形の中にプロパティを描画
	function OnGUI (position : Rect, property : SerializedProperty, label : GUIContent) {
		// 親プロパティで BeginProperty / EndProperty を使用すると
		// プロパティ全体でプレハブの上書きロジックが動作する
		EditorGUI.BeginProperty (position, label, property);
		
		// ラベルの描画
		position = EditorGUI.PrefixLabel (position, GUIUtility.GetControlID (FocusType.Passive), label);
		
		// 子フィールドをインデントさせない
		var indent = EditorGUI.indentLevel;
		EditorGUI.indentLevel = 0;
		
		// Rect の計算を行なう
		var amountRect = new Rect (position.x, position.y, 30, position.height);
		var unitRect = new Rect (position.x+35, position.y, 50, position.height);
		var nameRect = new Rect (position.x+90, position.y, position.width-90, position.height);
		
		// フィールドの描画 - 各々に passs GUIContent.none を渡してラベルなしで描画させる
		EditorGUI.PropertyField (amountRect, property.FindPropertyRelative ("amount"), GUIContent.none);
		EditorGUI.PropertyField (unitRect, property.FindPropertyRelative ("unit"), GUIContent.none);
		EditorGUI.PropertyField (nameRect, property.FindPropertyRelative ("name"), GUIContent.none);
		
		// インデントを元の状態に戻す
		EditorGUI.indentLevel = indent;
		
		EditorGUI.EndProperty ();
	}
}


// C# サンプル
using UnityEngine;
using UnityEditor;
using System.Collections;

[CustomPropertyDrawer(typeof(Ingredient))]
public class IngredientDrawer : PropertyDrawer {
	
	// 指定した四角形の中にプロパティを描画
	void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
		// 親プロパティで BeginProperty / EndProperty を使用すると
		// プロパティ全体でプレハブの上書きロジックが動作する
		EditorGUI.BeginProperty(position, label, property);
		
		// ラベルの描画
		position = EditorGUI.PrefixLabel(position, GUIUtility.GetControlID(FocusType.Passive), label);
		
		// 子フィールドをインデントさせない
		int indent = EditorGUI.indentLevel;
		EditorGUI.indentLevel = 0;
		
		// Rect の計算を行なう
		Rect amountRect = new Rect(position.x, position.y, 30, position.height);
		Rect unitRect = new Rect(position.x+35, position.y, 50, position.height);
		Rect nameRect = new Rect(position.x+90, position.y, position.width-90, position.height);
		
		// フィールドの描画 - 各々に passs GUIContent.none を渡してラベルなしで描画させる
		EditorGUI.PropertyField(amountRect, property.FindPropertyRelative ("amount"), GUIContent.none);
		EditorGUI.PropertyField(unitRect, property.FindPropertyRelative ("unit"), GUIContent.none);
		EditorGUI.PropertyField(nameRect, property.FindPropertyRelative ("name"), GUIContent.none);
		
		// インデントを元の状態に戻す
		EditorGUI.indentLevel = indent;
		
		EditorGUI.EndProperty();
	}
}
@]


!! Property Attribute を使用したスクリプト メンバーの GUI をカスタマイズする 

``Property Drawer`` の他の使用場面はカスタムの ``Property Attributes`` を持つスクリプトのメンバーの外見を変更することです。float または integer をある数値の範囲に制限してスライダーとして ~~Inspector~~ として使用したいとします。その場合はビルトインの ``RangeAttribute`` と呼ばれる ``PropertyAttribute`` を使用して実現ができます：

[@
// Show this float in the Inspector as a slider between 0 and 10

// JS example.
@Range (0.0, 10.0)
var myFloat = 0.0;

//C# example.
[Range(0.0f, 10.0f)]
public float myFloat = 0.0f;
@]

You can make your own ``PropertyAttribute`` as well. We'll use the code for the ``RangeAttribute`` as an example. The attribute must extend the ``PropertyAttribute`` class. If you want, your property can take parameters and store them as public member variables.

[@
// This is not an editor script. The property attribute class should be placed in a regular script file.

// JS example.
class RangeAttribute extends PropertyAttribute {
	var min : float;
	var max : float;
	
	function RangeAttribute (min : float, max : float) {
		this.min = min;
		this.max = max;
	}
}


// C# example.
using UnityEngine;
using System.Collections;


public class RangeAttribute : PropertyAttribute {
	public float min;
	public float max;
	
	public RangeAttribute (float min, float max) {
		this.min = min;
		this.max = max;
	}
}
@]

Now that you have the attribute, you need to make a ``Property Drawer`` that draws properties that have that attribute. The drawer must extend the ``PropertyDrawer`` class, and it must have a ``CustomPropertyDrawer`` attribute to tell it which attribute it's a drawer for.

[@
// The property drawer class should be placed in an editor script, inside a folder called Editor.

// JS example.

// Tell the RangeDrawer that it is a drawer for properties with the RangeAttribute.
@CustomPropertyDrawer (RangeAttribute)
class RangeDrawer extends PropertyDrawer {
	
	// Draw the property inside the given rect
	function OnGUI (position : Rect, property : SerializedProperty, label : GUIContent) {
		
		// First get the attribute since it contains the range for the slider
		var range : RangeAttribute = attribute as RangeAttribute;
		
		// Now draw the property as a Slider or an IntSlider based on whether it's a float or integer.
		if (property.propertyType == SerializedPropertyType.Float)
			EditorGUI.Slider (position, property, range.min, range.max, label);
		else if (property.propertyType == SerializedPropertyType.Integer)
			EditorGUI.IntSlider (position, property, range.min, range.max, label);
		else
			EditorGUI.LabelField (position, label.text, "Use Range with float or int.");
	}
}


// C# example.
using UnityEngine;
using UnityEditor;
using System.Collections;

// Tell the RangeDrawer that it is a drawer for properties with the RangeAttribute.
[CustomPropertyDrawer(typeof(RangeAttribute))]
public class RangeDrawer : PropertyDrawer {
	
	// Draw the property inside the given rect
	void OnGUI (Rect position, SerializedProperty property, GUIContent label) {
		
		// First get the attribute since it contains the range for the slider
		RangeAttribute range  = attribute as RangeAttribute;
		
		// Now draw the property as a Slider or an IntSlider based on whether it's a float or integer.
		if (property.propertyType == SerializedPropertyType.Float)
			EditorGUI.Slider(position, property, range.min, range.max, label);
		else if (property.propertyType == SerializedPropertyType.Integer)
			EditorGUI.IntSlider(position, property, (int) range.min, (int) range.max, label);
		else
			EditorGUI.LabelField(position, label.text, "Use Range with float or int.");
	}
}
@]

パフォーマンス上の理由により EditorGUILayout 関数は Property Drawer で使用できないことに留意して下さい。