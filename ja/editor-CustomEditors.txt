! カスタム エディタ / Custom Editors

ゲーム開発を高速化するうえでカギとなるのは頻繁に使用されるコンポーネントにカスタム エディタを 作成することです。これを例示するためにスクリプトを用意し、あるオブジェクトが 1 つの点を見続けるようにします。

[@
// JavaScript サンプル
var lookAtPoint = Vector3.zero;

function Update () {
    transform.LookAt (lookAtPoint);
}


// C# サンプル
using UnityEngine;
using System.Collections;


public class LookAtPoint : MonoBehaviour {
	public Vector3 lookAtPoint = Vector3.zero;

	void Update() {
		transform.LookAt(lookAtPoint);
	}
}
@]

これによりオブジェクトはワールド座標上の 1 つの地点を見続けます。

エディタ上で上手に動作させるための最初のステップはスクリプトがゲームを再生してないときもスクリプトが動作するようにすることです。ExecuteInEditMode 属性の追加により、これは実現できます。

[@
// JavaScript サンプル
@script ExecuteInEditMode()

var lookAtPoint = Vector3.zero;

function Update () {
    transform.LookAt (lookAtPoint);
}


// C# サンプル
using UnityEngine;
using System.Collections;

[ExecuteInEditMode]
public class LookAtPoint : MonoBehaviour {
	public Vector3 lookAtPoint = Vector3.zero;

	void Update() {
		transform.LookAt(lookAtPoint);
	}
}
@]

スクリプトをメインカメラにアタッチしてシーンビューで動かします。

!!! カスタム エディタの作成

これでも良いのですが、カスタマイズすることでさらにエディタをより良く出来ます。そのためには ``Editor`` を作成する必要があります。Editor と名前のついたフォルダに 
LookAtPointEditor というスクリプトを作成します。

[@
// JavaScript サンプル
@CustomEditor (LookAtPoint)
class LookAtPointEditor extends Editor {
    function OnInspectorGUI () {
        target.lookAtPoint = EditorGUILayout.Vector3Field ("Look At Point", target.lookAtPoint);
        if (GUI.changed)
            EditorUtility.SetDirty (target);
    }
}


// C# サンプル
using UnityEngine;
using UnityEditor;
using System.Collections;


[CustomEditor(typeof(LookAtPoint))]
public class LookAtPointEditor : Editor {
	void OnInspectorGUI() {
		LookAtPoint lap = (LookAtPoint) target;
		lap.lookAtPoint = EditorGUILayout.Vector3Field("Look At Point", lap.lookAtPoint);

		if (GUI.changed)
			EditorUtility.SetDirty(lap);
	}
}
@]

このクラスは Editor から派生する必要があります。 @CustomEditor 属性により Unity はどのコンポーネントに対する Editor とするべきか判断します。

OnInspectorGUI のコードは Unity がインスペクタ上でエディタを表示している間はつねに実行されます。任意の GUI コードを入れることができます。ゲームの OnGUI と同様に動作しますが インスペクタの中で実行されます。エディタはインスペクタで表示されているオブジェクトにアクセスするためのターゲットプロパティを定義します。

EditorUtility.SetDirty コードは GUI.changed をチェックし、ユーザが何かの値を変更した場合に実行します。

このケースでは Vector3 のようなフィールド を Transform エディタで次のように使用します：
Attach:CustomInspector.png\\


!!! シーンビュー追加Scene View Additions
シーンビューにコードを追加するにはカスタム エディタで OnSceneGUI を実装します。このケースでは、二つの位置ハンドルのセットを追加し、シーンビュー上で LookAt 地点をドラッグできます。

[@
// JavaScript サンプル
@CustomEditor (LookAtPoint)
class LookAtPointEditor extends Editor {
    function OnInspectorGUI () {
        target.lookAtPoint = EditorGUILayout.Vector3Field ("Look At Point", target.lookAtPoint);
        if (GUI.changed)
            EditorUtility.SetDirty (target);
    }
    
    function OnSceneGUI () {
        target.lookAtPoint = Handles.PositionHandle (target.lookAtPoint, Quaternion.identity);
        if (GUI.changed)
            EditorUtility.SetDirty (target);
    }
}


// C# サンプル
using UnityEngine;
using UnityEditor;
using System.Collections;


[CustomEditor(typeof(LookAtPoint))]
public class LookAtPointEditor : Editor {
	void OnInspectorGUI() {
		LookAtPoint lap = (LookAtPoint) target;
		lap.lookAtPoint = EditorGUILayout.Vector3Field("Look At Point", lap.lookAtPoint);

		if (GUI.changed)
			EditorUtility.SetDirty(lap);
	}

	void OnSceneGUI() {
		LookAtPoint lap = (LookAtPoint) target;
		lap.lookAtPoint = Handles.PositionHandle(lap.lookAtPoint, Quaternion.identity);

		if (GUI.changed)
			EditorUtility.SetDirty(lap);
	}
}
@]

OnSceneGUI は OnInspectorGUI と同様に動作します - 違いはシーンビューで実行されることです。エディタ の インタフェースの作成しやすくするため [[ScriptRef:Handles.html | Handles]] クラスに定義されている関数を使用できます。そこにある全ての関数は 3D シーンビューで動作するように設計されています。

もし 2D GUI オブジェクト（GUI, EditorGUI, 等）を配置したい場合、 Handles.BeginGUI() および Handles.EndGUI() でラップする必要があります。
