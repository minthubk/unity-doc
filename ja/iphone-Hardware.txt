! iOS ハードウェアガイド ガイド / iOS Hardware Guide

!! ハードウェアモデル

様々な世代のデバイスにおける利用可能なiOSデバイスを次の表でまとめています。

(:table width=100%:)
(:cellnr:)

!!![[http://en.wikipedia.org/wiki/IPhone#Model_comparison | iPhone モデル]] 


!!! オリジナル iPhone
* 画面: 320x480 ピクセル、 LCD 163ppi
* ARM11, 412 Mhz CPU

* PowerVR MBX Lite 3D グラフィックス プロセッサ
** 遅い
* 128MBのメモリ容量
* 2 メガピクセル カメラ

!!! iPhone 3G
* 画面: 320x480 ピクセル、 LCD 163ppi
* ARM11, 412 Mhz CPU
* PowerVR MBX Lite 3D グラフィックス プロセッサ
** 遅い
* 128MBのメモリ容量
* 2 メガピクセル カメラ
* GPS 対応

Attach:skiSafari.jpg\\
iPhone 3G: 固定関数グラフィックス（高度なシェーダなし）、非常に遅いCPUおよびGPU。

(:cellnr:)

!!! iPhone 3GS
* 画面: 320x480 ピクセル、 LCD 163ppi
* ARM Cortex A8, 600 MHz CPU
* PowerVR SGX535 グラフィックス プロセッサ
** ネイティブ解像度でのシェーダ パフォーマンス、 iPad2 と比較して: 
   Attach:Bar1.png
** ロー シェーダ パフォーマンス、 iPad3と比較して: 
   Attach:Bar2.png
* 256MBのメモリ容量
* ビデオキャプチャ機能つきの 3 メガピクセル カメラ
* GPS 対応
* コンパスに対応

Attach:shadowgun2.jpg\\
iPhone 3GS: シェーダ対応したハードウェア、 ピクセル ライティング (バンプマップ) は同時には画面の限られた領域のみ対応。
複雑なゲームでスクリプティングの最適化が必要。2012年7月時点でのアプリマーケットの平均的なハードウェア。

!!! iPhone 4
* 画面: 960x640 ピクセル、 LCD 326 ppi, 800:1 コントラスト比。
* Apple A4 
** 1Ghz ARM Cortex-A8 CPU
** PowerVR SGX535 GPU
*** ネイティブ解像度でのシェーダ パフォーマンス、 iPad2 と比較して: 
    Attach:Bar3.png
*** ロー シェーダ パフォーマンス、 iPad3と比較して: 
    Attach:Bar4.png
* 512MBのメモリ容量
* カメラ
** 後面 5.0 メガピクセル 裏面照射型CMOS イメージセンサー 720p HD video 30 fps および LED フラッシュ
** 全面 0.3 メガピクセル（VGA） ジオタグつき、タップフォーカス機能、および 480p SD ビデオ 30 fps
* GPS 対応
* コンパスに対応

!!! iPhone 4S
* 画面: 960x640 ピクセル、 LCD 326 ppi, 800:1 コントラスト比。
* Apple A5
** デュアルコア 1Ghz ARM Cortex-A9 MPCore CPU
** デュアルコア PowerVR SGX543MP2 GPU
*** ネイティブ解像度でのシェーダ パフォーマンス、 iPad2 と比較して: 
    Attach:Bar5.png
*** ロー シェーダ パフォーマンス、 iPad3と比較して: 
    Attach:Bar6.png
* 512MBのメモリ容量
* カメラ
** 後面 5.0 メガピクセル 裏面照射型CMOS イメージセンサー  720p HD video  30 fps および LED フラッシュ
** 全面 0.3 メガピクセル（VGA） ジオタグつき、タップフォーカス機能、および 480p SD ビデオ 30 fps
* GPS 対応
* コンパスに対応

Attach:csrCar.jpg\\
iPhone 4S は 新しい A5 チップにより、複雑なシェーダをスクリーン全体にレンダリングすることが出来ます。イメージエフェクトであっても実現可能です。しかし、シェーダ最適化は依然として決定的に重要。しかしゲームがデバイス性能を限界まで使用していない場合、PCと同様にこの世代のデバイスでは、スクリプティングおよびゲームプレイの最適化は時間の無駄になります。

!!! iPhone 5
* 画面: 1136x640 ピクセル, LCD at 326 ppi.
* Apple A6
** デュアルコア 1.3Ghz Apple デザイン ARMv7s CPU
** トリプルコア PowerVR SGX543MP3 GPU
*** ネイティブ解像度でのシェーダ パフォーマンス、 iPad2 と比較して: 
    Attach:Bar5.png
*** ロー シェーダ パフォーマンス、 iPad3と比較して:
    Attach:Bar6.png
* 1GB メモリ
* カメラ
** 後面 8.0 メガピクセル 赤外線フィルタ, 裏面照射型センサーによりビデオ撮影時も利用可能
** 前面 0.3 メガピクセル (VGA) ジオタグつき、タップフォーカス機能、および 480p SD ビデオ 30 fps
* GPS 対応
* コンパスに対応


!!![[http://en.wikipedia.org/wiki/IPod_Touch#Specifications| iPod Touch モデル]] 

(:cellnr:)

!!! 第 1 世代 iPod Touch
* 画面: 320x480 ピクセル、 LCD 163ppi
* ARM11, 412 Mhz CPU
* PowerVR MBX Lite 3D グラフィックス プロセッサ
** 遅い
* 128MBのメモリ容量

Attach:tripletown.jpg\\
iPod Touch: 固定関数グラフィックス（高度なシェーダなし）、非常に遅いCPUおよびGPU。

!!! 第 2 世代iPod Touch
* 画面: 320x480 ピクセル、 LCD 163ppi
* ARM11, 533 Mhz CPU
* PowerVR MBX Lite 3D グラフィックス プロセッサ
** 遅い
* 128MBのメモリ容量
* スピーカー および マイク

(:cellnr:)



!!! 第 3 世代 iPod Touch
* iPhone 3GS と同等レベル

Attach:csrRacing.jpg\\
第 3 世代iPod Touch 3rd: シェーダ対応のハードウェア、ピクセルライティング（バンプマップ）は同時にはスクリーンのわずかな一部でのみ実現。
複雑なゲームではスクリプト最適化が必要。2012年7月時点においてアプリ マーケット の標準的なハードウェア。

!!! 第 4 世代 iPod Touch
* iPhone 4 と同等レベル

!!! 第 5 世代 iPod Touch
* iPhone 4S と同等レベル

(:cellnr:)

!!![[http://en.wikipedia.org/wiki/IPad#Technical_specifications | iPad モデル]] 

!!! iPad
* 画面: 1024x768 ピクセル、 LCD 132 ppi, LEDバックライト
* Apple A4 
** 1Ghz MHz ARM Cortex-A8 CPU
** PowerVR SGX535 GPU
*** ネイティブ解像度でのシェーダ パフォーマンス、 iPad2 と比較して: 
    Attach:Bar7.png
*** ロー シェーダ パフォーマンス、 iPad3と比較して: 
    Attach:Bar8.png
* Wifi + Blueooth + (3G セルラー HSDPA, 3G バージョンでの 2G セルラー EDGE)
* 加速度計、環境ライティングセンサー、磁力計（デジタルコンパス向け）
* ボタン入力装置: ホーム、スリープ、画面回転ロック、ボリューム。

Attach:airmail.jpg\\
iPad: 第 4 世代iPod Touch および iPhone 4 と同様


(:cellnr:)
!!! iPad 2
* 画面: 1024x768 ピクセル、 LCD 132 ppi, LEDバックライト
* Apple A5
** デュアルコア 1Ghz ARM Cortex-A9 MPCore CPU
** デュアルコア PowerVR SGX543MP2 GPU
*** ネイティブ解像度でのシェーダ パフォーマンス、 iPad2 と比較して: 
    Attach:Bar9.png
*** ロー シェーダ パフォーマンス、 iPad3と比較して: 
    Attach:Bar10.png
* 前述と同様

Attach:deadtrigger.jpg\\
iPad2: A5 では、シェーダが十分にシンプルなものであればフルクリーン バンプマップが実現出来ます。しかし、ゲームが重要なオブジェクトでのみバンプマップされていることでベストのパフォーマンスを発揮する傾向があります。フルスクリーンのイメージエフェクトはまだ手が届かないところです。スクリプト最適化の重要性はやや劣ります。


(:cellnr:)

!!! iPad 3
* 画面: 2048 x 1536 ピクセル、 LCD 264 ppi, LEDバックライト
* Apple A5X
** デュアルコア 1Ghz ARM Cortex-A9 MPCore CPU
** Quad-Core PowerVR SGX543MP4 GPU
*** ネイティブ解像度でのシェーダ パフォーマンス、 iPad2 と比較して: 
    Attach:Bar11.png
*** ロー シェーダ パフォーマンス、 iPad3と比較して: 
    Attach:Bar12.png

Attach:bladeslinger.jpg\\
iPad 3 では Reflective Water および フルスクリーンのイメージエフェクトといったRender-To-Texture エフェクトを実現できます。しかし、シェーダ最適化は依然として決定的に重要です。もしゲームがデバイスをハードウェア性能の限界まで使用していない場合、スクリプトおよびゲームプレイの最適化はこの世代のデバイスにおいて、 PC デバイス同様に時間の無駄です。

(:cellnr:)

!!! iPad (4rd generation)
* 画面: 2048x1536 ピクセル, LCD 264 ppi,バックライト
* Apple A6X
** デュアルコア 1.4Ghz ARM Cortex-A9 MPCore CPU
** クワッドコア PowerVR SGX554MP4 GPU
*** ネイティブ解像度でのシェーダ パフォーマンス、 iPad2 と比較して: 
    Attach:Bar11.png
*** ロー シェーダ パフォーマンス、 iPad3と比較して: 
    Attach:Bar12.png


(:tableend:)

!! グラフィックス プロセッシング ユニット および 隠面消去
iPhone/iPad グラフィックス プロセッシング ユニット (GPU) はタイルベースのデファードレンダラです。デスクトップコンピュータの多くのGPUと比較して iPhone/iPad GPU はシーンで、イメージをレンダリングするために必要なプロセッシング作業を最小化することにフォーカスしています。これにより、表示ピクセルのみがプロセッシング対象となります。

GPUのフレームバッファはタイルに分割され、かつレンダリングはタイルごとに行われます。最初に、フレーム全体での三角形は集積されてタイルに割り当てられます。次に表示されている三角形のフラグメントが選ばれます。最後に、選ばれた三角形フラグメントはラスタライザに渡されます（三角形フラグメントはカメラからオクルージョンされたものはこのステージで排除されます）。

言い換えると、iPhone/iPad GPUは $$Hidden Surface Removal$$ （隠面消去）でコストを削減します。そのようなアーキテクチャはより少ないメモリ帯域の消費、使用電力を節約し、テクスチャ キャッシュ バッファをより良く活用します。タイルベースの Deferred Rendering によりデバイスがオクルージョンされたフラグメントを実際のラスタライゼーションの前に排除し、オーバードローを低く抑えます。

詳細については次も参照して下さい:-
* [[http://www.imgtec.com/factsheets/SDK/PowerVR%20Technology%20Overview.1.0.2e.External.pdf | POWERVR MBX Technology Overview]]
* [[http://developer.apple.com/iphone/library/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/OpenGLESPlatforms/OpenGLESPlatforms.html#//apple_ref/doc/uid/TP40008793-CH106-SW1 | Apple Notes on iPhone/iPad GPU and OpenGL ES]]
* [[http://developer.apple.com/library/ios/#documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Performance/Performance.html | Apple Performance Advices for OpenGL ES in General]]
* [[http://developer.apple.com/library/ios/#documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/BestPracticesforShaders/BestPracticesforShaders.html | Apple Performance Advices for OpenGL ES Shaders]]

!!! MBX シリーズ

オリジナル iPhone、iPhone 3GS、および iPod Touch 第1世代および第2世代 は $$MBX$$ シリーズの GPU を備えています。MBX シリーズは $$OpenGL ES1.1$$ 、固定関数 Transform/Lighting パイプライン、およびフラグメントごとに2つのテクスチャのみをサポートしています。

!!! SGX シリーズ

iPhone 3GS 以降の新しいデバイスでは $$SGX$$ シリーズのGPU を備えています。SGX  シリーズは $$OpenGL ES2.0$$ レンダリングAPI 、頂点シェーダ、およびピクセル シェーダをサポートしています。固定関数パイプラインはそのような GPU でネイティブサポートされていませんが、その代わりに 頂点シェーダおよびピクセル シェーダにより同等の機能をその場でエミュレートします。

SGX シリーズは完全にマルチサンプル アンチエイリアスをサポートします。


!!! テクスチャ圧縮

iOS で唯一サポートされているテクスチャ圧縮は $$PVRTC$$ です。 PVRTC は RGB および RGBA （カラー情報に加えてアルファチャンネル）テクスチャ形式をサポートし、ひとつのピクセルを 2 または 4 バイトに圧縮できます。

PVRTC 形式はメモリ使用量を削減すること、メモリ帯域幅（すなわち、データがメモリから読み込みできるレート。通常はモバイルデバイスで非常に制限されている）の消費を抑えることのために重要です。


!!! 頂点処理ユニット
iPhone/iPad には、頂点処理専用でラスタライゼーションと並行で計算を行う、のユニットがあります。より良い並行処理を得るために、iPhone/iPad はラスタライザーより 1 フレーム先に頂点処理をします。


!! 統合メモリアーキテクチャ
iPhone/iPadの CPU および GPU 双方ともは同じメモリを共有します。長所はテクスチャのビデオメモリ不足を気にする必要がないことです（もちろんメインメモリを使い切らないかぎり）。短所はゲームプレイおよびグラフィックスで同じメモリ帯域幅を共有することです。メモリ帯域幅をグラフィックスで占有するほど、ゲームプレイや物理計算で使用できる量は減ります。


!! マルチメディア コプロセッシング ユニット
iPhone/iPad メイン CPU は強力な SIMD (Single Instruction, Multiple Data) コプロセッサを備えていて、 $$VFP$$ または $$NEON$$ アーキテクチャのいずれかを採用しています。Unity iOS ランタイムはこれらのユニットを、スキンメッシュの変換、ジオメトリ バッチング、音声処理、、およびその他計算負荷の大きい演算など、複数のタスクで活用します。
