! ビルドされるiOSプレイヤーのサイズ最適化 / Optimizing the Size of the Built iOS Player

プレイヤーのサイズを削減するふたつの主な方法は、Xcodeの $$Active Build Configuration$$ と、 Unityの $$Stripping Level$$ を変更する方法です。

!! リリースモードでビルド

Xcodeの $$Active Build Configuration$$ ドロップダウンメニューで $$Debug$$ および $$Release$$ オプションのどちらかを選択することでゲームによっては2-3MBが節約出来ます。

Attach:iphone-activeBuildConfig.png\\
''Active Build Configuration ドロップダウンメニュー''

リリースモードでは、プレイヤーはデバッグ情報なしでビルドされるため、ゲームがクラッシュするかその他の問題があった場合、出力にはスタックトレースの情報が利用出来ません。これは完成ゲームのデプロイとしては問題ありませんが、開発中はデバッグモードの使用を希望するはずです。


!! iOS ストリッピング レベル (Advanced ライセンス機能)

ストリッピング作業によるサイズの最適化は次の通りにアクティベートします。

# $$Strip assemblies$$ レベル: スクリプトのバイトコードは分析がなされて、スクリプトから参照されないクラスやメソッドはDLLからはずすことが出来て、AOTコンパイルフェーズからは、除外することが出来ます。この最適化によりメインのバイナリ サイズおよび付随するDLLのサイズを削減し、reflectionが使用されてないかぎり安全です。

# $$Strip ByteCode$$ レベル:  .NET DLLはストリッピングされてメタデータのみとなります。これが出来るのは全てのコードがAOTフェーズでプリコンパイルされていてメイン バイナリにリンクされているためです。

# $$Use micro mscorlib$$ レベル: 特別で小さいバージョンのmscorlibが使用されます。いくつかのコンポーネント、例えば、Security、 Reflection.Emit、 Remoting、 non Gregorian calendars、その他はこのライブラリから除かれます。さらに内部コンポーネント間の相互依存関係は最小化されます。この最適化によりメイン バイナリおよびmscorlib.dllサイズを削減しますがいくつかのSystemおよびSystem.Xmlアセンブリクラスと互換性がないため、慎重に使用して下さい。

これらのレベルは累積なので、レベル3の最適化は明示的にレベル1、2を含み、レベル2は明示的にレベル1を含みます。

__注意:__ ``Micro mscorlib`` はのコアライブラリの大きくストリッピングされたバージョンです。UnityでMonoランタイムにより必要とされるアイテムのみが残ります。micro mscorlib を使用するベストプラクティスはアプリケーションで必要ないクラスまたは他の機能を使用しないことです。GUIDは省くことが出来る良い例です。簡単にカスタム作成された擬似GUIDにより簡単に置き換えることが出来てこれによりより良いパフォーマンスおよびアプリケーションサイズにつながります。

!! テクニック
!!! Reflection を使用するときのストリッピングの対応方法
ストリッピングは静的なコード分析や依存していて効率的に行うことが難しい場合があり、特にreflectionのように動的な機能が使用される場合です。そういう状況ではどのクラスを対象外とするかの情報をヒントとして渡す必要があります。Unityは ''ブラックリスト'' をプロジェクト単位でサポートします。ブラックリストを使用するには ``link.xml`` ファイルを作成して``Assets`` フォルダに置くのみです。 ``link.xml`` の記載方法のサンプルは次の通りです:-
[@
<linker>
       <assembly fullname="System.Web.Services">
               <type fullname="System.Web.Services.Protocols.SoapTypeStubInfo" preserve="all"/>
               <type fullname="System.Web.Services.Configuration.WebServicesConfigurationSectionHandler" preserve="all"/>
       </assembly>

       <assembly fullname="System">
               <type fullname="System.Net.Configuration.WebRequestModuleHandler" preserve="all"/>
               <type fullname="System.Net.HttpRequestCreator" preserve="all"/>
               <type fullname="System.Net.FileWebRequestCreator" preserve="all"/>
       </assembly>
</linker>
@] 

__注意:__ どのクラスが誤ってアプリケーションに必要とされているのにストリッピングされてしまったか判断するのか難しい場合があります。シミュレータ上でストリッピングされたアプリケーションを実行しXcodeコンソールのメッセージをチェックすることで有用な情報が得られることがしばしばあります。

!!! ディストリビューションを出来る限り最小化する簡単なチェックリスト

# アセットを最小化します: テクスチャでPVRTC圧縮を有効化し解像度を出来る限り下げます。さらに未圧縮音声の数も最小化します。ファイルサイズのテクニックについては [[Main.ReducingFilesize|ここ]] を参照下さい。
# iOSストリッピングレベルを $$Use micro mscorlib$$ に設定します。
# スクリプト コール最適化を $$Fast but no exceptions$$ に設定します。
# コードの中でSystem.dll または System.Xml.dll に存在するものは一切使用しないで下さい。これらのライブラリはmicro mscorlibと互換性が __ありません__ 。
# 不要なコード依存性を取り除く
# API Compatibility Level に $$.Net 2.0 subset$$ をセットします。.Net 2.0 subsetは他のライブラリと限られた互換性しかないことに留意下さい。
# Target Platform を $$armv6 (OpenGL ES1.1)$$ にセットします。
# JS配列は使用しないで下さい。
# 値型とジェネリック コンテナの組み合わせは構造体も含めて避けます。

!!! Unity でアプリケーションはどれぐらい小さくできますか？
空プロジェクトはサイズ最適化を全てオフにすればAppStoreで 20 MBになります。もし Advanced ライセンス保有の場合（すなわちストリッピング オプションにアクセス出来る場合）、メインカメラのみの空シーンはAppStoreでおよそ 11 MBに下げることが出来ます (zipつき および DRM 付属) 。

!!!AppStoreでリリースした後にアプリサイズが増加したのはなぜでしょう？
アプリをパブリッシュするときにAppleは最初にバイナリファイルを暗号化してzipとして圧縮します。多くの場合AppleのDRMは4 MBほど増えます。原則として最終的なサイズ全てのファイル (実行ファイルを除いて) をzip圧縮したアーカイブ容量に圧縮してない実行ファイルを加えた容量です。
