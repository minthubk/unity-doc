!レイヤー / Layers

$$Layers$$ は$$Cameras$$ によりシーンの一部のみレンダリングするため、また$$Lights$$ によりシーンの一部のみ照らすため、などに最も頻繁に使用されます。一方で選択的に、Colliderを無視するあるいは[[LayerBasedCollision | Collisions]] を発生させるためにも使用することが出来ます。

!! レイヤーの作成

最初のステップは新規レイヤーを作成することで、次にそのレイヤーを$$GameObject$$ に割り当てます。新規レイヤーを作成するにはEditメニューを開いて^^Project Settings->Tags^^ を選択します。

空のUser Layerの中から新規レイヤーを作成します。ここではレイヤー8を選択することにします。

Attach:Layer-CreateNewLayer.png


!! レイヤーの割り当て

新規レイヤーは作成できたので、次にゲームオブジェクトの一つにアサインします。

Attach:Layer-ChooseLayer.png

Tag ManagerでPlayerレイヤーをレイヤー8に割り当てました。


!! シーンの一部のみをカメラのカリングマスクで描画

カメラのカリングマスクを使用して、特定の1つのレイヤーにあるオブジェクトのみ選択的にレンダリング出来ます。
そのためには、オブジェクトを選択的にレンダリングするカメラを選択します。

Culling Maskプロパティでレイヤーのチェックをつけたり外したりすることでカリングマスクの設定を変更することが出来ます。

Attach:Layer-CullingMask.png


!! 選択的にRaycastする

レイヤーを使用してRaycastするときに特定のレイヤーのコライダを無視することが出来ます。
例えばPlayerレイヤーのみにRaycastして、他のオブジェクトを無視したい場合があるかもしれません。

Physics.Raycast関数はビットマスクをしようして、各々のビットで各レイヤーを無視するかどうか判定させることが出来ます。
layerMask（レイヤーマスク）の全てのビットが有効である場合は、全てのコライダと衝突します。
もしlayerMask = 0 の場合Rayによりコリジョンすることがありません。


[@// JavaScript 例

// レイヤーのインデックスをビットシフトすることでビットマスクを取得します。
var layerMask = 1 << 8;
// PlayerレイヤーにあるオブジェクトとRayが相互作用するか判定します。
if (Physics.Raycast (transform.position, Vector3.forward, Mathf.Infinity, layerMask))
    print ("RayがPlayerに当たりました");


// C# 例

int layerMask = 1 << 8;
		
// PlayerレイヤーにあるオブジェクトとRayが相互作用するか判定します。
if (Physics.Raycast(transform.position, Vector3.forward, Mathf.Infinity, layerMask))
    Debug.Log("RayがPlayerに当たりました");
@]

現実世界では、この逆を行いたい場合があります。Playerレイヤー以外の全てのコライダに対してRaycastします。

[@// JavaScript 例
function Update () {
  // レイヤーのインデックス(8)をビットシフトすることでビットマスクを取得します。
  var layerMask = 1 << 8;
  // これによりレイヤー8のコライダのみに対してRaycastします。
  // しかし、実際にはレイヤー8以外のもの全てに衝突させたい場合があります。このときは「~」記号でこれを実現し、ビットマスクを反転します。
  layerMask = ~layerMask;

  var hit : RaycastHit;
  // PlayerレイヤーにあるオブジェクトとRayが相互作用するか判定します。
  if (Physics.Raycast (transform.position, transform.TransformDirection (Vector3.forward), hit, Mathf.Infinity, layerMask)) {
    Debug.DrawRay (transform.position, transform.TransformDirection (Vector3.forward) * hit.distance, Color.yellow);
    print ("当たりました");
  } else {
    Debug.DrawRay (transform.position, transform.TransformDirection (Vector3.forward) *1000, Color.white);
    print ("当たりませんでした");
  }
}


// C# 例
void Update () {
    // レイヤーのインデックス(8)をビットシフトすることでビットマスクを取得します。
    int layerMask = 1 << 8;
		
    // これによりレイヤー8のコライダのみに対してRaycastします。
  // しかし、実際にはレイヤー8以外のもの全てに衝突させたい場合があります。このときは「~」記号でこれを実現し、ビットマスクを反転します。
    layerMask = ~layerMask;
	
    RaycastHit hit;
    // PlayerレイヤーにあるオブジェクトとRayが相互作用するか判定します。
    if (Physics.Raycast(transform.position, transform.TransformDirection (Vector3.forward), out hit, Mathf.Infinity, layerMask)) {
        Debug.DrawRay(transform.position, transform.TransformDirection (Vector3.forward) * hit.distance, Color.yellow);
        Debug.Log("当たりました");
    } else {
        Debug.DrawRay(transform.position, transform.TransformDirection (Vector3.forward) *1000, Color.white);
        Debug.Log("当たりませんでした");
    }
}@]

Raycast関数にlayerMaskを渡さない場合、IgnoreRaycastレイヤーのコライダのみ無視します。
Raycastするときにいくつかのコライダを無視するにはこれが最も簡単です。
