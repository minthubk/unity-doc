!シェーダ プログラムのバリエーションを複数作成する / Making multiple shader program variants

シェーダを書いたうえで、僅かに違いをもたせたバリエーションを作成すると便利な場面があります。一般に "メガシェーダ" または "万能型 (uber) シェーダ" と呼ばれ、シェーダ コードをケースごとに異なるプリプロセッサ デリバティブにより複数回コンパイルすることで実現します。

Unity では ``#pragma multi_compile`` ディレクティブを [[SL-ShaderPrograms | シェーダのスニペット]] に追加します。実行時に適切なシェーダのバリエーションが Material キーワード（Material.EnableKeyword および DisableKeyword）またはグローバル シェーダ キーワード (Shader.EnableKeyword および DisableKeyword) から選ばれます。


!! マルチコンパイルの仕組み (multi_compile )

次のようなディレクティブ：

  #pragma multi_compile FANCY_STUFF_OFF FANCY_STUFF_ON

により二つのシェーダのバリエーションが生成され、片方は ``FANCY_STUFF_OFF`` が定義され、もう一方は ``FANCY_STUFF_ON`` が定義されます。実行時に Material キーワードまたは グローバル シェーダ キーワードのどちらかが選ばれます。もし二つのキーワード両方が無効の場合、最初の方（"off"） が使用されます。

multi_compile には二つ以上のキーワード記述できる。例えば次のサンプルにより 4 つのシェーダ バリエーションが生成されます：

  #pragma multi_compile SIMPLE_SHADING BETTER_SHADING GOOD_SHADING BESTEST_EVER_SHADING


!! 複数の multi_compile の組み合わせ

複数の multi_compile 行を提供すると結果として、可能性がある全ての組み合わせがコンパイルされます：

  #pragma multi_compile A B C
  #pragma multi_compile D E

最初の行で 3 つのバリエーションが生成され、二つめの行で 2 つ、合計で 6 つのシェーダ バリエーションが出来ます (A+D, B+D, C+D, A+E, B+E, C+E)。

各々の multi_compile 行がひとつのシェーダ "機能" を制御すると考えると分かりやすいです。シェーダのバリエーションは急速に増大するため、例えば 10 行の multi_compile "機能" で各々 2 つのオプションがあると 1024 個ものシェーダ バリエーションが出来てしまうので注意です！
