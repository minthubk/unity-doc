!特殊フォルダおよびスクリプト コンパイル順序 / Special Folders and Script Compilation Order

プロジェクトのフォルダ名はほとんど自由に決められますが、Unity が特殊な目的をもったコンテンツに対して予約しているフォルダ名もあります。スクリプト コンパイル順序に影響するフォルダもあります。要するにスクリプト コンパイル順序 には四つの別のフェーズがありスクリプトがコンパイルされる場所はその親フォルダに依存します。

スクリプトが他のスクリプトで定義されたクラスを参照しないといけない場面では特に重要です。基本的なルールは現在のフェーズの ''後に'' コンパイルされる場合は参照できません。現在のフェーズ、またはそれより前のフェーズでコンパイルされた場合は完全に参照できます。

ひとつの言語で書かれたスクリプトが別の言語で書かれたクラスを参照するときに同様の状況が発生します（例えば UnityScript ファイルが C# スクリプトで定義されたクラスの変数を宣言するとしましょう）。前提条件となるのは、参照されるクラスが ''前の''フェーズでコンパイルされていることです。

コンパイルのフェーズは次の通りです:-

__フェーズ 1:__ __Standard Assets__, __Pro Standard Assets__, __Plugins__ フォルダにあるランタイム スクリプトを実行

__フェーズ 2:__ __Standard Assets/Editor__, __Pro Standard Assets/Editor__, __Plugins/Editor__ フォルダにあるエディタ スクリプトを実行

__フェーズ 3:__ __Editor__ フォルダにないスクリプトを実行

__フェーズ 4:__ 残り全てのスクリプトを実行（すなわち __Editor__ フォルダにあるスクリプト)


さらに Assets フォルダの上位にある __WebPlayerTemplates__ にある全てのスクリプトは一切コンパイルされません。また他の特殊フォルダと違っていて、サブフォルダ内で同じ動作をしません（例． Scripts/Editor はエディタフォルダとして動作するが、 Scripts/WebPlayerTemplates フォルダはコンパイルされる）。

よくある事例は UnityScript ファイルが C# ファイルで定義されたクラスを参照する必要がある場合です。 C# ファイルを Plugins フォルダに配置して、 UnityScript を特殊でないフォルダに入れることで実現できます。そうしない場合、 C# クラスが見つけられないというエラーが出ます。
