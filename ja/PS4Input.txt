! PS4: Input
Note that an extensive sample project (Input and Motion unitypackage) is included with your installation of the Unity PS4 Plugin.

Attach:Dualshock4InputMap.png

__To Query Button states:__
*Call Input.GetKey() with a KeyCode. See table below for reference.
**EG. Use ''Input.GetKey(KeyCode.Joystick1Button0)'' to see if 'Cross' is pressed.
*Call ''Input.GetButton()'' with a name set in the Input Manager. See table below for reference.
**EG. Use ''Input.GetButton("ButtonName")'' to see if a button is pressed, where ButtonName refers to a name as set up in the Input Manager.

__To query analog axis valeus:__
*Call ''Input.GetAxis()'' with a name set in the Input manager. See table below for reference.

!!Input Settings
The following settings can be used to detect stick and button input on the device.


(:html:)
<table border="0" cellpadding="12" cellspacing="0" style="border-collapse:collapse;">
<tr><th>Button Name</th><th>Positive Button</th><th>Type</th><th>Axis</th><th>KeyCode - Used with Input.GetKey()</th><th>Comments</th></tr>
<tr><td>Cross</td><td>joystick button 0</td><td>Key or Mouse Button</td><td>N/A</td><td>Joystick1Button0</td><td></td></tr>
<tr><td>Circle</td><td>joystick button 1</td><td>Key or Mouse Button</td><td>N/A</td><td>Joystick1Button1</td><td></td></tr>
<tr><td>Square</td><td>joystick button 2</td><td>Key or Mouse Button</td><td>N/A</td><td>Joystick1Button2</td><td></td></tr>
<tr><td>Triangle</td><td>joystick button 3</td><td>Key or Mouse Button</td><td>N/A</td><td>Joystick1Button3</td><td></td></tr>
<tr><td>Left Shoulder</td><td>joystick button 4</td><td>Key or Mouse Button</td><td>N/A</td><td>Joystick1Button4</td><td></td></tr>
<tr><td>Right Shoulder</td><td>joystick button 5</td><td>Key or Mouse Button</td><td>N/A</td><td>Joystick1Button5</td><td></td></tr>
<tr><td>Touch Pad Button</td><td>joystick button 6</td><td>Key or Mouse Button</td><td>N/A</td><td>Joystick1Button6</td><td></td></tr>
<tr><td>Options</td><td>joystick button 7</td><td>Key or Mouse Button</td><td>N/A</td><td>Joystick1Button7</td><td></td></tr>
<tr><td>L3</td><td>joystick button 8</td><td>Key or Mouse Button</td><td>N/A</td><td>Joystick1Button8</td><td></td></tr>
<tr><td>R3</td><td>joystick button 9</td><td>Key or Mouse Button</td><td>N/A</td><td>Joystick1Button9</td><td></td></tr>
<tr>
 <td>D-Pad</td>
 <td>N/A</td>
 <td>Joystick Axis</td>
 <td>6th Axis (Joysticks) - Horizontal<br><br>7th Axis  (Joysticks) - Vertical</td>
 <td>N/A</td>
 <td>Range [-1; 1]</td>
</tr>
<tr><td>Left Stick</td><td>N/A</td><td>Joystick Axis</td><td>X Axis - Horizontal<br><br>Y Axis - Vertical</td><td>N/A</td><td>Range [-1; 1]</td></tr>
<tr><td>Right Stick</td><td>N/A</td><td>Joystick Axis</td><td>4th Axis  (Joysticks) - Horizontal<br><br>5th Axis  (Joysticks) - Vertical</td><td>N/A</td><td>Range [-1; 1]</td></tr>
</table>
(:htmlend:)

!!Touch Pad
The touch pad is implemented through the PS4Input class with PS4Input.GetLastTouchData(). Two simultaneous touches are supported.

!!Pad User Details
Information about the user/pad is available via the PS4Input.PadGetUsersDetails(playerId).

!!Last Gyro
Use PS4Input.GetLastGyro(playerId) to get Gyro information about a given controller.

!!Last Orientation
Use PS4Input.GetLastOrientation(playerId) to get the controller orientation. To reset the currently read orientation use PS4Input.PadResetOrientation(playerId).

!!Accelerometer
Use PS4Input.GetLastAcceleration(playerId) to get the controller accelerometer information.

!!Lightbar
The lightbar can be changed through the PS4Input class with PS4Input.PadSetLightBar(playerId). Pass in the ID of the controller to change along with Red, Green and Blue values ranging from 0-255. Note that the lights cannot be turned off and have a 5% lower limit of illumination (13/255). Camera tracking of the controllers is also not guaranteed if you vary from the default colours assigned to each controller, to reset the lightbar to its default color use PS4Input.PadResetLightBar(playerId).

!!Controller Speaker
To play audio through the speaker on a users controller, use AudioSource.PlayOnDualShock4(userId). The audio output will be adjusted by the setting on the audio source including filters and effects, but the audio source cannot play through both the world and the controller simultaneously. To find the userId of the player currently using a controller, use PS4Input.PadGetUsersDetails(playerId) to return a PS4Input.LoggedInUser and retrieve the userId from within that.
