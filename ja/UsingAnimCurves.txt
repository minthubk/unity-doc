!アニメーション カーブの使用 / Using Animation Curves

全てのプロパティで $$Animation Curve$$ を持たせてアニメーション化し、アニメーション クリップから制御できます。プロパティ リストでアニメーション ビューのプロパティは色付けされたカーブのインジケータがあります。アニメーション プロパティにカーブを追加する方法の詳細は [[UsingAnimationView|アニメーション ビューの使用]] を参照して下さい。

デフォルトでは、アニメーション ウィンドウはカーブの変わりに Dopesheet ビューを表示します。ウィンドウの左下にある ~~Curves~~ ボタンをクリックしてカーブ ビューへ切り替えられます。

選択したプロパティのみのアニメーション カーブがビューの右側に表示されます。

!!カーブ、キー、キーフレームの理解 / Understanding Curves, Keys and Keyframes

アニメーション カーブには複数の $$Key$$ があり、カーブが通過する地点となります。カーブ エディタ上ではカーブ上のダイヤ形状として表されます。表示されたカーブのうちひとつ以上がキーを持つフレームのことをキーフレームと呼びます。
もしプロパティが現在プレビューされたフレームがある場合、カーブ インジケータはダイヤ形状を持つことになります。

Attach:AnimCurvesKeys.png

キーフレームは現在プレビューされたフレームに追加するには ~~Keyframe~~ ボタンをクリックします。これにより全ての選択されたプロパティにキーを同時に追加します。キーフレーム ラインを追加するには、キーフレームを右クリックしてコンテキスト メニューから ~~Add Keyframe~~ を選択します。配置した後、キーフレームはマウスでドラッグできます。複数のキーフレームを同時にドラッグすることも出来ます。キーフレームを削除するには選択して Delete をクリックするか、右クリックしてコンテキスト メニューから ~~Delete Keyframe~~ を選択します。

!!アニメーションをサポートするプロパティの種類 / Property Types that Support Animation

アニメーション ビューはゲームオブジェクトの位置、回転、スケール以外のアニメーションに使用できます。任意のコンポーネントおよびマテリアルのプロパティは自身のスクリプト コンポーネントのパブリック変数を含めアニメーション化することが出来ます。複雑な視覚効果や動作のアニメーションを作成するには関連したプロパティでアニメーション カーブを追加します。

アニメーション システムでサポートされているプロパティの種類は次のとおりです：

* Bool
* Float
* Color
* Vector2
* Vector3
* Vector4
* Quaternion
* オブジェクト参照

配列はサポートされておらず、同様に構造体や上記以外のオブジェクトもサポートされていません。

アニメーション ビューの使用例のいくつかは次のとおりです：

* ライトの色および強度をアニメーション化して、点滅、ゆらめき、脈動させることが出来ます。
* ループ再生されたオーディオ ソースのピッチおよび音量をアニメーション化してサウンド アセットサイズを最小に抑えたまま生命感あふれる風 / 水の流れ、エンジンの動作を実現できます。
* マテリアルのテクスチャ オフセットをアニメーション化して移動ベルトや動く歩道、水の流れ、または特殊効果を再現します。
* Ellipsoid Particle Emitter の Emit 状態および速度をアニメーション化して華麗な花火または噴水などを作成します。
* 自身のスクリプトコンポーネントの変数をアニメーション化して時間とともに違う動作をさせます。

ゲームロジックの制御のためにアニメーション カーブを使用するとき Unity 上でアニメーションが再生されサンプリングされる方法に注意して下さい。

!!回転補間の種類
Unity において回転は内部でクォータニオンとして表現されてます。クォータニオンは .x, .y, .z, .w の値から構成され、内容について正しく理解している人を除いて修正すべきでありません。その代わりに、回転は .x, .y, .z という 3 軸からの回転を表す値から構成されるオイラー角により調整されます。

二つの回転間を補間するとき、補間はクォータニオン、オイラー角どちらでも実行できます。アニメーション ビューによりトランスフォームの回転をするときに使用できる補間方法を選択できます。しかし、どの補間方法を選択しても回転はオイラー角の形式でいつでも表示できます。


!!クォータニオン補間

クォータニオン補間は二つの回転間を最短経路に沿って綺麗に補間をします。これでジンバルロックのような回転補間の乱れを避けれます。しかし、クォータニオン補間は 180 度以上の回転を表すことができません。これは逆周りのほうが最短経路となるためです。もしクォータニオン補間を使用して二つのキーが 180 度以上離れている場合、実際の回転はスムーズであってもカーブは不連続に表示されます。逆周りになるのは経路が短いためです。もし 180 度以上の回転をさせたい場合は間に追加のキーを配置する必要があります。クォータニオン補間を使用して、ひとつのカーブのキー、接線の変更により他の二つのカーブの形状を変える場合があります。これは 3 つのカーブ全てが内部のクォータニオン表示から作成されるためです。クォータニオン補間を使用するとき、キーは常にリンクされて特定の時点でキーを作成すると残り二つのカーブでもキーが作成されます。

クォータニオン補間を使用するときに 270 度離すと反対周りの 90 度のに補間が行なわれます。

!!オイラー角補間

オイラー角補間は大多数のケースで使用します。オイラー角は任意の大きな回転を表し、 .x, .y, .z のカーブは互いに独立しています。オイラー角補間は複数軸周りを同時に回転させるとジンバルロックといった乱れが生じることがあります。しかし各々の軸周りを単純に回転させるため作業するうえでは分かりやすいものです。オイラー角補間が使用されるとき Unity はカーブを内部的にクォータニオン表現で保持します（カーブをベイクする）。これは外部アプリケーションから Unity にアニメーションをインポートするときに行なわれることと似通っています。このようなカーブのベイクはその過程でキー追加が行なわれ Constant の接線の種類はサブフレームのレベルでは正確でないかもしれません。
