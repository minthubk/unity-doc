!PS4: Project Settings
Unity for PS4 comes with additional project settings.
Build Settings: General
*Build Type

Player Settings:
*Icon
*Other Settings

Player Settings: Publishing Settings
*Param File
*Title Voice Recognition Details
*Playstation(R)Network

----
!!Build Settings
!!!Build Type
__PC Hosted__
* Creates a package to be launched from the PC
* Option to link with development player ( for player connection, profiler and full TTY output)
* Autoconnect Profiler option
* Explicit Null Checks option to enable reporting of  null references in the TTY

!!Player Settings
!!Icon
The game icon can currently be changed by overwriting the icon0.png file in the sce_sys folder within the build folder (after doing a 'Build & Run' or 'Build' within Unity). This icon is used on the PS4 Home screen.

''Image Format''
* 512 x 512 pixels
* PNG 24-bit
* Non-interlaced format.

More information on the Still Image Icon can be found at https://ps4.scedev.net/docs/ps4-en,Content_Information-Specifications-orbis,Still_Image_Icon/1/

!!Other Settings
__Rendering__

''Static Batching''
* Static batching allows the engine to reduce draw calls for geometry of any size (provided it does not move and shares the same material). Static batching is significantly more efficient than dynamic batching. You should choose static batching as it will require less CPU power.

''Dynamic Batching''
* Unity can automatically batch moving objects into the same draw call if they share the same material and fulfill other criteria. Dynamic batching is done automatically and does not require any additional effort on your side.

The benefits of static and dynamic batching can vary greatly from game to game. Ganeral information and tips on using Static and Dynamic bacthing is available at http://docs.unity3d.com/Documentation/Manual/DrawCallBatching.html

''GPU Skinning''
* Uses SX11/ES3 GPU Skinning to greatly increase the rendering speed of skinned meshes.

__Optimization__

''API Compatibility Level''
* .NET 2.0
** This is close to the full .NET 2.0 API and offers the best compatibility with pre-existing .NET code. Application's build size and startup time may be relatively poor.
* .NET 2.0 Subset
** This is close to the Mono "monotouch" profile. The advantage of using this profile is reduced build size (and startup time) but this comes at the expense of compatibility with existing .NET code.

Note that .Net 2.0 subset has limited compatibility with other libraries. More information can be found at http://docs.xamarin.com/guides/ios/advanced_topics/limitations/ 

''AOT Compilation Options''
* Allows you to set compilation options for the mono Ahead Of Time compiler.

''Optimize Mesh Data''
* Remove unused mesh components


!!Publishing Settings
!!!Param File
''Category''
* PS4 Application

''Master Version''
* The Master Version is the submission version of a product, for each re-submission to SCE the master version would be incremented, i.e. 01.00, 01.01, etc.

''Application Version''
* The Application Version is used for patch updates, when you first submit your application this would be 01.00, for each patch update you would increment this, i.e. 0.1.00, 0.1.01, etc.

''Content ID''
* Packages are distinguished by ContentIDs. View [=%SCE_ROOT_DIR%\ORBIS\documentation\pdf\en\Publishing_Tools\Publishing_Tools-Overview_e.pdf=] for more information

''Title''
* This title is displayed in the Activities section, as well as in all social communications

''Parental Level (0-11)''
* Set the parental control level. Note that the lower the number, the tighter the restriction

''Param File (param.sfx)''
* The location of your self-made param.sfx file, if a file is specified here then the contents of the param.sfx file will override all of the above package parameter settings. This can be useful if you plan to submit your application in multiple territories which require slightly different parameters.

More information about creating parameter files can be found at [=%SCE_ROOT_DIR%\ORBIS\documentation\pdf\en\Publishing_Tools\Param_File_Editor-Users_Guide_e.pdf=] and [=%SCE_ROOT_DIR%\ORBIS\documentation\pdf\en\Publishing_Tools\Publishing_Tools-Overview_e.pdf=]

__Playstation(R)Network__

''Trophy Pack''
* Specify the location of your trophy pack file (*.trp)

Note that you must set the NP Communications ID in Player Settings and that must match the NP Communications ID specified in the trophy pack.

The Trophy Pack File Utility can be used to create and modify your trophy pack. The Trophy Pack File Utility is a Windows application that comes with the PS4 SDK.

More information on trophy packs and creating trophy packs can be found at: https://ps4.scedev.net/docs/ps4-en,Trophy_System-Overview-orbis,Designing_the_Trophy_Set/1/ and [=%SCE_ROOT_DIR%\ORBIS\Tools\Publishing Tools\help\Trophy_Pack_File_Utility-Users_Guide_e.pdf=]


''NP Communication ID''
* An NP Communication ID can be requested for, and issued, per application via the PlayStation(R)4 Developer Network

''NP Communication Passphrase''
* Enter the NP Communication Passphrase provided by via the PlayStation(R)4 Developer Network

''NP Communication Signature''
* Enter the NP Communication Signature provided by via the PlayStation(R)4 Developer Network

The Unity PS4 Add-on includes a package called '[PS4 Plugins]NP Toolkit.unitypackage' that contains a native plugin and managed assembly that provides a scripting interface to the Playstation Network services along with example scripts.
