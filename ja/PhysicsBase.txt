Unityは NVIDIA PhysXエンジンを内蔵しています。これにより独特で最先端の動作や様々な便利な機能を活用できます。

!!基本

物理挙動をオブジェクトに与えるためには、$$Rigidbody$$ を追加するだけです。このようにすると、オブジェクトは重力が作用することになり、その世界の中で他のオブジェクトと衝突できます。

!!! Rigidbody

[[class-Rigidbody|Rigidbody]] は物理シミュレーションを与えられたオブジェクトです。RigidbodyはPlayerが押して動かすことの出来るもの、例えば壷や固定されてないもの、などに使用することが出来るほか、直接スクリプティングによってRigidibodyに力を加えて（Add Forceして）、動かすことが出来ます。

もしKinematicでないRigidbodyのTransformを直接移動すると、他のオブジェクトと正しく衝突しないかもしれません。その代わりに、Rigidbodyを動かすには、力を加えるか、トルクを加える必要があります。さらにRigidbodyに[[class-HingeJoint|Joint]] を加えて複雑な動作も実現することが出来ます。例えば、物理的なドアか、振り子の動作をする鎖のついたクレーンを作成することが出来ます。

さらにはRigidbodyを使用して乗り物に活力を与えて、Rigidbody、四輪の[[class-WheelCollider| Wheel Collider]] とユーザの[[class-InputManager | Input]] にもとづいたWheel Forceを加えるスクリプト、などを作成することが出来ます。

スクリプトからRigidbodyを加えることで飛行機を作成することが出来ます。あるいは、様々なJointを追加したり、スクリプトから力を加えることで、特殊な乗り物やロボットを作成することが出来ます。

Rigidbodyは[[class-BoxCollider|Primitive Collider]] と組み合わせて使用することが良くあります。

__ヒント：__
*親子のRigidbodyを一緒にするべきではありません。
*RigidbodyのScaleをするべきではありません。



!!! Kinematic Rigidbodiy

$$Kinematic Rigidbody$$ はisKinematicオプションを有効にしたRigidbodyです。Kinematic Rigidbodyは力、重力、コリジョンによる作用を受けません。これらは、明示的にTransformの位置や回転を設定したり、アニメーションできますが、他のKinematic Rigidbodyを相互作用させることが出来ます。

Kinematic Rigidbodyは他のRigidbodyと衝突した際に[[RigidbodySleeping | Wake Up]] して、上に乗せられたRigidbodyに摩擦（Friction）を加えます。

次に、Kinematic Rigidbodyの例をいくつか示します：

# オブジェクトに物理挙動を持たせるけれど、別の状況ではアニメーションやスクリプトで制御を明示したい場合がたまにあります。例えばアニメーションするキャラクターを作成して、そのボーンにRigidbodyをアタッチして、ジョイントを接続してRagdollとして使用するとします。ほとんどの場合、キャラクターはアニメーションで制御するので、RigidbodyをKinematicに設定します。しかし、キャラクターが何かに当てられたときはRagdollに変更して、物理挙動を与えるようにします。そのためには、isKinematicプロパティを無効にするだけです。
# 動いているオブジェクトに他のオブジェクトを押すことが出来るようにしたいけど、逆にそれ自身は押されたくない場合がたまにあります。例えば、アニメの土台があり、いくつかのRigidbodyの箱を上に乗せたい場合、土台はRigidbodyのない$$Collider$$ ではなく、Kinematic Rigidbodyとすべきです。
# Kinematic Rigidbodyにアニメーションを持たせ、本当のRigidbodyに利用可能なジョイントをつけてKinematic Rigidbodyをフォローさせるようにしたい場合があります。

!!! Static Collider

$$Static Collider$$ はコライダはあるけれどRigidbodyはないゲームオブジェクトです。Static Colliderは同じ場所を保ち不動である階段の物体などで使用されます。すでに存在するグラフィックスのメッシュに$$Mesh Collider$$ を追加（あるいはもっと良い方法として^^Import Settings^^ のGenerate Colliders のチェックボックスを有効化）するか、他のコライダのタイプを使用することが出来ます。

リジッドボディのなあい Static Collider は有効化/無効化あるいは変更すべきではありません。Static Colliderの変更はPhysXでの内部計算のやり直しを発生させ、それが高価であるために大きなパフォーマンス低下につながります。ひどい場合にはコライダが仕様が未定義の状態になり、物理計算に不具合を生じさせるかもしれません（例えば変更された Static Collider に対する Raycast によりそれを検知できなかったり、逆に空間上のランダムな地点で検知してしまったりします）。さらにStatic Collider にもとづいて他の Rigidbody をウェイクアップさせる動作は仕様が未定義であり、Static Collider を移動することでそれにタッチした Rigidbody に摩擦が加わりません。これらの理由のため、 Rigidbody であるコライダのみ変更対象とすべきであり、 ''isKinmatic'' は true をセットして他のコライダが物理挙動により影響を受けないようにすべきです。


!!! Character Controller
ヒューマノイド型キャラクター作成する場合、[[class-CharacterController|Character Controller]] を使用すべきです。これはアクションゲーム（Third Person Platformer）のメインキャラかもしれないし、FPSの狙撃手や敵キャラかもしれません。

このControllerは不自然な動きになってしまうため、物理法則にしたがいません（Doomでは時速140キロで走って、1フレームで停止して、方向転換することが出来ます）。その代わり、移動するコライダは衝突判定を行って、キャラクターが壁に沿ってスライドして、階段を昇ったり降りたり出来るようになります。

Character ControllerはForceにより作用を受けませんが、Rigidboyにスクリプトから力を加えることで押すことは出来ます。一般に、全てのヒューマノイドキャラクターはCharacter Controllerを使用して実装します。

Character Controllerは物理挙動が継承されないため、もし本当の物理挙動を当てはめたい場合、例えば揺れるロープにつかまったり、大きな岩に押しのけられたり、といった場合、Rigidbodyを使用する必要があります。これにより、キャラクターにJointやForceを使用することが出来ます。Character Controllerは常にY軸と平行の向きであるため、空中で向きを変える必要がある場合（例えば重力が変化する、など）もRigidbodyを使用する必要があります。しかし、キャラクターを不自然でないようにRigidbodyをチューニングするのは、ゲームキャラクターが物理法則に反して動くことを期待されているため難しい、ということを頭に入れるべきです。もう一つの違いは、Character Controllerが決まった階段のステップをスムーズに動くことは出来ますが、Rigidbodyには難しいことです。

もし、Character ControllerをRigidbodyの親とする場合、"Joint" のような動作になります。