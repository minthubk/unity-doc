! コンポーネントを使う / Using Components

$$Components$$ は、ゲームにおけるオブジェクトおよび動作の根本であり、あらゆる $$GameObject$$ で実際に動作している部分です。 もしコンポーネントとゲームオブジェクトの間の関係をまだ理解していない場合には、この先を読み進める前に [[GameObjects]] のページを読んでください。

ひとつのゲームオブジェクトは、様々なコンポーネントのコンテナです。 初期状態では、全てのゲームオブジェクトには ``Transform`` コンポーネントがはじめから存在しています。 これは、Transformがそのゲームオブジェクトの位置、回転、スケールを決定しているからです。 トランスフォームコンポーネントなしでは、ゲームオブジェクトはゲーム世界において位置を持つことができないのです。 例として空のゲームオブジェクトを作成してみましょう。 メニューから、 ^^GameObject->Create Empty^^ とクリックします。 その新しく作ったゲームオブジェクトを選択して、 $$Inspector$$ で見てみましょう。

Attach:EmptyGO.png
''空のゲームオブジェクトでもトランスフォームコンポーネントはある''

インスペクターを使うことで、選択したゲームオブジェクトにどんなコンポーネントが付いているか知ることができることを、しっかりと覚えてください。 コンポーネントを追加したり取り外したりしても、インスペクターは常にどのコンポーネントが現在付いているか示します。 インスペクターを使うことで、スクリプトを含むあらゆるコンポーネントのプロパティの変化を知ることができるのです。

!! コンポーネントを追加する

選択中のゲームオブジェクトにコンポーネントを追加するには、コンポーネントメニューを使います。 例として、さっき作ったばかりの空のゲームオブジェクトに $$Rigidbody$$ を追加してみましょう。 ゲームオブジェクトを選択して、メニューから ^^Component->Physics->Rigidbody^^ と選びます。 すると、リジッドボディのプロパティがインスペクター上に現れるのがわかるでしょう。 その空のゲームオブジェクトを選択したまま $$Play$$ ボタンを押してみると、ちょっと驚くことが起こります。 試してみて、リジッドボディ以外には何もついていないゲームオブジェクトに対して、リジッドボディがどんな機能を付け加えたのか理解しましょう。（ゲームオブジェクトの Y 成分が減少しはじめます。 これはUnityの物理エンジンが、重力に従ってゲームオブジェクトを落下させているからです。）

Attach:RigidBodyGO.png
''空のゲームオブジェクトにリジッドボディコンポーネントを付ける''

そのほかに、 $$Component Browser$$ を使うという手もあります。オブジェクトをインスペクターで表示している時に、 ^^Add Component^^ ボタンを押すことでポップアップします。

Attach:ComponentBrowser.png

コンポーネントブラウザを使うことで、カテゴリ別にコンポーネントを便利に探すこともできますし、ブラウザの検索ボックスを使って名前からコンポーネントを探すこともできます。

単一のゲームオブジェクトに対して複数のコンポーネントを付けたり、コンポーネントを組み合わせて付けたりすることができます。 コンポーネントの中には、その他のコンポーネントと組み合わせることではじめて機能を発揮するものもあります。 例えば、リジッドボディはコライダと一緒に使われます。 リジッドボディは、 $$NVIDIA PhysX$$ 物理エンジンを通じて、トランスフォームコンポーネントをコントロールしていますが、同時にコライダを使うことで、リジッドボディがその他のコライダと衝突したり接触したりすることが可能になるのです。

特定のコンポーネントの使い方をさらに詳しく知りたい場合には、リファレンスの関連するコンポーネントのページ を参照してください。 またUnityを使っている最中に、あるコンポーネントのリファレンスページを開きたくなった時には、インスペクターに表示されているコンポーネントのヘッダーにある小さな __?__ ボタンをクリックしてください。


!! コンポーネントの編集

コンポーネントの最も重要な特徴は、その柔軟な運用性にあります。 あるゲームオブジェクトにコンポーネントを付けると、そのコンポーネントには様々な値や $$Properties$$ が設定されます。 これらの値やプロパティは、ゲームを作っている最中にエディタで調整できるだけでなく、ゲームを動かしている最中にもスクリプトから調整することもできるのです。 プロパティには主要なタイプが２つあります。すなわち、 $$Values$$ と $$References$$ です。

下の図を見てください。 これは、 ``Audio Source`` コンポーネントを持つ空（から）のゲームオブジェクトです。 インスペクターで表示されている ``Audio Source`` の全ての値は、初期値となっています。

Attach:AudioGO.png

このコンポーネントには、ひとつの参照プロパティと、７つの値プロパティがあります。 ``Audio Clip`` は、参照プロパティです。 このオーディオソースが再生をはじめると、 ``Audio Clip`` プロパティによって参照されているオーディオファイルを再生しようとします。 もし何の参照も設定されていないと、再生すべきファイルがないのでエラーが発生します。 従って、インスペクター中でファイルを参照しなければいけません。 これは実に簡単で、適当なオーディオファイルをプロジェクトビューから参照プロパティにドラッグするか、オブジェクトセレクターを使います。

Attach:AudioReference.png
''Audio Clip プロパティでサウンドエフェクトファイルが参照されている''

コンポーネントは、その他の様々なコンポーネント、ゲームオブジェクトもしくはアセットを参照先として持つことができます。 参照先として割り当てられるものについて、さらに詳しく知るには、 [[Editing Reference Properties | 参照の割り当て]] のページを参照ください。

オーディオクリップの残るプロパティは、全て値プロパティです。 これらはインスペクターから直接調整することができます。 オーディオクリップの値プロパティは全て、トグルか、数値、ドロップダウンフィールドとなっていますが、値プロパティには、文字列、色、カーブなどのその他の種類のものもあり得ます。 本件および値プロパティの編集の仕方についてさらに詳しく知るには、 [[Editing Value Properties40|プロパティ値の編集]] のページを参照ください。

!! コンポーネント設定のコピー＆ペースト

全てのコンポーネントのコンテキストメニューに、設定をコピー＆ペーストする項目があります。

Attach:ComponentContextMenu.png

コピーした値を既に存在しているコンポーネントにペーストするには、 ^^Paste Component Values^^ メニュー項目を使います。 一方、 ^^Paste Component As New^^ を使うことで、それらの値を持った新規コンポーネントを作成することもできます。

!! プロパティを試す

あなたのゲームが $$Play Mode$$ の時に、任意のゲームオブジェクトのインスペクターからプロパティを自由に変更することができます。 例えば、ジャンプの高さを違った値に変えてみたいとしましょう。 スクリプト中に ``Jump Height`` を作るだけで、プレイモードに入ってその値を変更し、ジャンプボタンを押したらどうなるか、確認することが可能になります。 さらにプレイモードから出ずに、値を変更してすぐに結果を確認できます。 プレイモードから出ると、プロパティはプレイモード前の値に戻りますので、作業内容は失われません。 このワークフローにより、あなたが作るゲームのプレイ感を実験したり、調整して磨きあげたりする際に驚くほど強力です。繰り返し作業に莫大な時間を費やす必要がなくなります。 プレイモード中でどれかのプロパティで試してみましょう。便利さを痛感するでしょう。

!! コンポーネントの順番を変更する

インスペクター中でコンポーネントが表示される順番は、大抵の場合問題にはなりません。 しかし [[comp-ImageEffects|イメージ エフェクト]] のようにいくつかのコンポーネントに関しては、その順番が重要になることもあります。 コンテキストメニュー中に ^^Move Up^^ および ^^Move Down^^ のコマンドがありますので、必要に応じてコンポーネントを並び替えてください。

Attach:ComponentContextUpDown.png

!! コンポーネントを取り除く

もしあるコンポーネントを取り除きたくなった場合には、インスペクターに表示されているコンポーネントのヘッダーの上で、Option を押しながらクリック、もしくは右クリックして、  ^^Remove Component^^ を選んでください。 もしくは、コンポーネントのヘッダーにある __?__ マークの隣のオプションアイコンを左クリックすることでも可能です。 コンポーネントを取り除くと、全てのプロパティは失われてしまい、取り消せないので、実行前に本当にそれが必要か十分確認するようにしてください。

