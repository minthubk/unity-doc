! コンテンツの保護 / Protecting Content

暗号化を使用してアセットを送信時に保護することは出来ますが、データがクライアントに渡った後はコンテンツを奪いとる方法が見つかってしまいます。例えば、3Dデータをドライバーのレベルで記録できるツールがあり、GPUに送信されたときにユーザがモデルやテクスチャを抽出できます。この理由から、基本的なスタンスはどうしてもアセットを抽出しようとすれば、出来てしまうということです。

しかし、それでもカスタムでアセットバンドルファイルのデータ暗号化を行うことは出来ます。

これを行う一つの方法はTextAssetを使用して、データをバイトで格納できます。データファイルを暗号化して .bytes 拡張子で保存出来て、UnityはTextAssetの種類として扱うことが出来ます。エディタで一回インポートするとTextAssetははアセットバンドルに含めてサーバー上に配置できます。クライアントサイドでは、アセットバンドルはダウンロードされて、バイトから復号化されてTextAssetに格納されます。この方法によりアセットバンドルは暗号化されませんが、TextAssetとして格納されたデータは暗号化されます。


[@string url = "http://www.mywebsite.com/mygame/assetbundles/assetbundle1.unity3d";
IEnumerator Start () {
    // 暗号化されたアセットバンドルのダウンロードを開始
    WWW www = new WWW.LoadFromCacheOrDownload (url, 1);

    // ダウンロード完了を待機
    yield return www;

    // アセットバンドルからTextAssetをロード
    TextAsset textAsset = www.assetBundle.Load("EncryptedData", typeof(TextAsset));
 
    // バイトデータを取得
    byte[] encryptedData = textAsset.bytes;

    // アセットバンドルデータを復号化
    byte[] decryptedData = YourDecryptionMethod(encryptedData);

    // バイト配列を使用。アセットバンドルはキャッシュされます。
}@]


別のアプローチとしてはアセットバンドルをソースから完全に暗号化してWWWクラスを使用してダウンロードすることです。サーバがバイナリデータとして扱うかぎり、どのような拡張子をつけても問題ありません。一回ダウンロードした後は、WWWインスタンスの .bytes プロパティから、データに対する復号化ルーチンを使用して復号化されたアセットバンドルのファイルデータを取得して、メモリからアセットバンドルを取得するために[[ScriptRef:AssetBundle.CreateFromMemory.html|AssetBundle.CreateFromMemory]] を使用します。
An alternative approach is to fully encrypt the AssetBundles from source and then download them using the WWW class. You can give them whatever file extension you like as long as your server serves them up as binary data. Once downloaded you would then use your decryption routine on the data from the .bytes property of your WWW instance to get the decrypted AssetBundle file data and create the AssetBundle from memory using [[ScriptRef:AssetBundle.CreateFromMemory.html|AssetBundle.CreateFromMemory]].


[@string url = "http://www.mywebsite.com/mygame/assetbundles/assetbundle1.unity3d";
IEnumerator Start () {
    // 暗号化されたアセットバンドルのダウンロードを開始
    WWW www = new WWW (url);

    // ダウンロード完了を待機
    yield return www;

    // バイトデータを取得
    byte[] encryptedData = www.bytes;

    // アセットバンドルデータを復号化
    byte[] decryptedData = YourDecryptionMethod(encryptedData);

    // バイト配列からアセットバンドルを作成

    AssetBundleCreateRequest acr = AssetBundle.CreateFromMemory(decryptedData);
    yield return acr;

    AssetBundle bundle = acr.assetBundle;

    // これでアセットバンドルを使用することが出来ます。アセットバンドルはキャッシュされません
}@]


後者のアプローチの前者に対する長所は、どのようなメソッドでも使用して（ただしAssetBundles.LoadFromCacheOrDownloadを除いて）バイトを転送して、例えばプラグインのソケットであっても、データは完全に暗号化されることです。欠点としてはUnityの自動キャッシュを使用してキャッシュされないことです。WebPlayer以外のすべてのプレイヤーで、 [[ScriptRef:AssetBundle.CreateFromFile.html|AssetBundles.CreateFromFile]] を使用して、ファイルをディスク上に手動で格納し、ロードできます。

三つ目のアプローチはこの両者を混ぜることであり、アセットバンドルをTextAssetとして、通常のアセットバンドルの中に、格納します。暗号化されているアセットバンドルに含まれる暗号化されてないアセットバンドルがキャッシュされます。元のアセットバンドルはメモリにロードすることが出来て、復号化されて [[ScriptRef:AssetBundle.CreateFromMemory.html|AssetBundle.CreateFromMemory]] を使用してインスタンス化されます。

[@string url = "http://www.mywebsite.com/mygame/assetbundles/assetbundle1.unity3d";
IEnumerator Start () {
    // 暗号化されたアセットバンドルのダウンロードを開始
    WWW www = new WWW.LoadFromCacheOrDownload (url, 1);

    // ダウンロード完了を待機
    yield return www;

    // アセットバンドルからTextAssetをロード
    TextAsset textAsset = www.assetBundle.Load("EncryptedData", typeof(TextAsset));
 
    // バイトデータを取得
    byte[] encryptedData = textAsset.bytes;

    // アセットバンドルデータを復号化
    byte[] decryptedData = YourDecryptionMethod(encryptedData);

    // バイト配列からアセットバンドルを作成
    AssetBundleCreateRequest acr = AssetBundle.CreateFromMemory(decryptedData);
    yield return acr;

    AssetBundle bundle = acr.assetBundle;

    // これでアセットバンドルを使用することが出来ます。ラッピングするアセットバンドルはキャッシュされます。
}@]
