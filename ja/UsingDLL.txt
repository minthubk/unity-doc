!Unity プロジェクトでの Mono DLL 使用 / Using Mono DLLs in a Unity Project

通常、スクリプトはプロジェクトにソースファイルとして保持され、ソースが変更されたときにUnity によりコンパイルされます。しかし外部コンパイラを用いてスクリプトを__ダイナミック リンク ライブラリ__ (DLL) としてコンパイルすることも出来ます。結果の DLL は次にプロジェクトに追加して、それに含まれるクラスは通常のスクリプトと同様にオブジェクトにアタッチできます。

一般的にDLLよりもスクリプトで作業をしたほうが簡単です。しかし、DLL 形式で提供された サードパーティ製 Mono コードをアクセスしないといけない場合があります。自身のコードを開発するとき、Unity によりサポートされないコンパイラを使用できる場合があり（例えば F#）、コードを DLL としてコンパイルし Unity プロジェクトに追加することが出来ます。さらに、ソースコードを提供することなくUnity コードを提供したい場合があり（例えば Asset Store プロダクトなど）、その場合に DLL はこれを実現する簡単な方法です。


!! DLL の作成

DLL を作成するには、最初に適切なコンパイラが必要です。.NETコードを生成する全てのコンパイラは Unity で動作することが保証されていないため、大量の作業に着手する前にコンパイラを何らかのコードでテストしておくことが賢明です。もし DLL がUnity APIに依存するコードが何もない場合、適切なコンパイラ オプションを使用してシンプルに DLL とすることができます。もし Unity API が使用したい場合、 Unity 自身の DLL をコンパイラで利用可能とする必要があります。 Mac ではこれらはアプリケーション バンドルに含まれます（コンテキストメニューからShow Package Contentsコマンドを使用することでバンドルの内部構造が見れます。Unity アプリケーションを右クリックまたは Ctrl を押しながらクリックします）:-

Unity DLL へのパスは通常、

	/Applications/Unity/Unity.app/Contents/Frameworks/Managed/

...であり、2 つの DLL は UnityEngine.dll および UnityEditor.dll と名前がついています。

Windows では、DLL は Unity アプリケーションについてきたフォルダにあります。パスは通常

	C:\Program Files\Unity\Editor\Data\Managed\

...であり、DLL のファイル名は Mac OS 向けと同じです。

DLL をコンパイルするときの正確なオプションは使用されるコンパイラにより幅があります。例えば Mono C# コンパイラ、すなわち __mcs__、のコマンドラインは Mac OS では次のように見えます:-

	mcs -r:/Applications/Unity/Unity.app/Contents/Frameworks/Managed/UnityEngine.dll -target:library ClassesForDLL.cs 

ここで、''-r'' オプションはビルドに含めるべきライブラリへのパスを指定し、この場合は UnityEngine ライブラリです。 ''-target'' オプションによりどのビルドが必要であるか指定し、 "library" という文字列は DLL ビルドを選択するために用いられています。最後に、コンパイルするソースファイルは ''ClassesForDLL.cs'' です（このファイルがカレントの作業フォルダにあることが前提ですが、必要であればファイルをフルパス指定できます）。全てがうまく行く前提で、結果の DLL ファイルはソースフォルダと同じ場所に表示さます。

!!DLL の使用

一回コンパイルされた後、DLL は他の全てのアセットと同様に、Unity プロジェクトにドラッグ＆ドロップできます。DLL アセットにはたたまれた 三角形マーク があり、ライブラリの中の別クラスを明らかにします。MonoBehaviour から得られるクラスは通常のスクリプトと同様にゲームオブジェクト上にドラッグ＆ドロップできます。非MonoBehaviour クラスは他のスクリプトから通常の方法で直接使用できます。 

Attach:DLLScreenshot.png\\
''クラス名が表示されている、展開された DLL''

!! MonoDevelop および Visual Studio 手順ガイド

このセクションでは 簡単な DLL でのサンプルをビルドして、.NET ライブラリを生成するメジャーな IDE である MonoDevelop および Visual Studio と統合する方法を学びます。このセクションではさらに DLL のデバッグ セッションを準備する方法も説明します。

!!! DLL の記述およびビルド

# MonoDevelop または Visual Studio を開きます

# アプリケーションのメニューから新規のプロジェクトを作成します:

**MonoDevelop:
### メニューから menu File > New > Solution を開きます
### C# > Library を選択します

**Visual Studio:	
### メニューから File > New > Project 開きます
### Visual C# > Class Library を選択します

# 新規ライブラリの情報を入力します:

**__Name__ は名前空間であり、このサンプルでは "DLLTest" を使用します。
**__Location__ はプロジェクトの親フォルダです。
**__Solution name__ はプロジェクトフォルダです。

# Unity API への参照を追加します:

**MonoDevelop:
### ソリューション ブラウザでコンテキストメニューを開き（右クリック）、 Edit references を選択します
### .Net Assembly tab > File System > select file のオプションを選択します

**Visual Studio:
### ソリューション エクスプローラでコンテキストメニューを開き（右クリック）、 Add Reference を選択します
### Browse > Browse > select file のオプションを選択します

# 必要な Unity API ファイルを選択します:

**MacOS:
***&lt;Applications&gt;/Unity.app/Contents/Frameworks/Managed/UnityEngine.dll

**Windows:
***&lt;Program Files&gt;\Unity\Editor\Data\Managed\UnityEngine.dll

# このサンプルでは、ソリューション ブラウザ でクラスの名前を "MyUtilities" にリネームしたうえ、次のコードと置き換えます:
 !!!C#
 [@
 using System;	
 using UnityEngine;

 namespace DLLTest {

	public class MyUtilities {
	
		public int c;

		public void AddValues(int a, int b) {
			c = a + b;	
		}
	
		public static int GenerateRandom(int min, int max) {
			System.Random rand = new System.Random();
			return rand.Next(min, max);
		}
	}
 }
 @]
# 最後にプロジェクトをビルドして DLL ファイルおよびそのデバッグシンボルを生成します。

!!! 新規作成した DLL を Unity で使用する

# Unity を開き、新規のプロジェクトを作成します

# ビルドされたファイル <project folder>/bin/Debug/DLLTest.dll を Assets またはサブフォルダにコピーします (例えば Plugins フォルダ)

# このサンプルでは C# スクリプトとして "Test" を Assets フォルダに作成し、次のコードと置き換えます:

 !!!C#
 [@
 using UnityEngine;
 using System.Collections;
 using DLLTest;
	
 void Start () {
	MyUtilities utils = new MyUtilities();
	utils.AddValues(2, 3);
	print("2 + 3 = " + utils.c);
 }
	
 void Update () {
	print(MyUtilities.GenerateRandom(0, 100));
 }
 @]
# 最後にスクリプトをシーン上のオブジェクトにアタッチして（すなわち Main Camera）、シーンを実行します。出力結果は $$Console$$ ウィンドウで見られます。

!!! DLL のデバッグ セッションをセットアップ

# DLL のデバッグシンボルを準備します:

**MonoDevelop:
*** ビルドされたファイル &lt;project folder&gt;/bin/Debug/DLLTest.dll.mdb を Assets フォルダにコピーします (すなわち Assets/Plugins/)

**Visual Studio:
### &lt;Program Files&gt;\Unity\Editor\Data\Mono\lib\mono\2.0\pdb2mdb.exe をコマンドプロンプトで実行し、 <project folder>\bin\Debug\DLLTest.pdb を引数として渡します
### 変換されたファイル &lt;project folder&gt;\bin\Debug\DLLTest.dll.mdb を Assets フォルダにコピーします (すなわち Assets\Plugins\)

# "Test" スクリプトを MonoDevelop で開き、 Tools メニュー（Windows）または MonoDevelop-Unity メニュー (MacOS)からUnity デバッガを有効化します:

**Add-in Manager > Installed tab > Unity > select Mono Soft Debugger Support for Unity > Enable

詳細については [[Debugger]] ページを参照して下さい。
