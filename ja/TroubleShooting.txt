! トラブルシューティング / Trouble Shooting
本項ではUnityを使用する際に良くある問題を解決する方法を説明します。以下で各プラットフォームごとに取りあげていきます。

(:tocportion:)

!Platform Trouble Shooting

[[#DesktopTroubleShooting]]
!Desktop!
>>desktop<<
!! MonoDevelopでDebugボタンがグレーアウトされる
* Unity.exe をMonoDevelopが見つけられないという意味です。MonoDevelopのPreferencesで Unity -> Debugger へとセクションを移動して、 Unity.exe のパスを指定して下さい。

!! MonoDevelop の Welcome ページを除く方法はある？
* はい。。MonoDevelopのPreferencesで  Visual Style セクションへと移動して "Show welcome page on startup" のチェックを外します。

!! OSX 10.6.4でのGeforce 7300GT
* OSX 10.6.4でのGeforce 7300GTでマテリアルが正しく表示されないため Deferred Rendering が無効化されています。原因はビデオドライバーにバグがあるためです。

!! Windows x64 のスクリプトで NullReferenceException のときに Unity がクラッシュする
* [[http://support.microsoft.com/kb/976038 | Windows Hotfix #976038]] を適用します。

[[#DesktopShadowTroubleShooting]]
!! グラフィックス
!!! フレームレートが遅い かつ／または 画像の乱れがある
* ビデオカードドライバが最新でない場合に発生することがあります。ビデオカード製造元の最新の公式ドライバを入手してください。




!! シャドウ
!!! シャドウが全く見えない

* シャドウは $$Unity Pro$$ のみの機能であるため、 Unity Pro がない場合はシャドウが得られません。当然、より簡単な [[class-Projector | Projector]] を使ったシャドウであれば可能です。
* シャドウは特定のグラフィックス ハードウェアでのみサポートされています。詳細については [[Shadows]] を参照下さい。
* シャドウが完全に無効化されていないか [[class-QualitySettings | Quality Settings]] を確認して下さい。
* __シャドウは現在AndroidおよびiOSモバイルプラットフォームではサポートされていません。 __

!!! オブジェクトの一部でシャドウ 投影しない／されない

シャドウをレンダリングされるためには、オブジェクトの [[class-MeshRenderer | Renderer]] は ``Receive Shadows`` を有効にする必要があります。さらにシャドウを投影するためには ``Cast Shadows`` が他のオブジェクトで有効にする必要があります（両方ともデフォルトでは有効）。

不透明なオブジェクトのみシャドウを投影します／されます。つまり内蔵 [[shader-TransparentFamily | 透明]] シェーダまたはパーティクルシェーダを使用しているオブジェクトはシャドウを投影しません。 [[shader-TransparentCutoutFamily | 透明カットアウト]] シェーダによりフェンス、植生、その他に利用することがほとんどの場合に可能です。カスタムで記述した [[Shaders]] を使用する場合、ピクセルライティングを使用して [[SL-SubshaderTags | Geometry Render Queue]] を使用する必要があります。``頂点ライティング`` を使用したシェーダはシャドウを投影されませんが、投影することは出来ます。
 
$$Pixel Light$$ のみがシャドウを投影します。もしシーンに他のいくつかライトがあるにも関わらず、ライトがつねにシャドウを投影するようにしたい場合、 ``Force Pixel`` レンダリングモードをセットしてください。（詳細は [[class-Light | Light]] を参照下さい）。


>><<
[[#iPhoneTroubleShooting]]
!iOS!
>>ios<<
! iOSデバイスでのトラブルシューティング

iOSの場合、Unityエディタでは完全に正しく動作するけれども、実際のデバイスでは正しく動作しないか起動すらしない状況があります。
これらの問題は通常コードまたはコンテンツ品質に関係しています。このセクションでは良くあるケースについて説明します。

!! ゲームがしばらくすると反応しない。Xcode のステータスバーで "interrupted" と表示される
これが起こる要因は複数あります。典型的な原因としては:
# 初期化されていない変数などによるスクリプティングエラー。
# サードパーティ製Thumbによりコンパイルされたネイティブライブラリ。そのようなライブラリはiOS SDKリンカでよく知られた問題を引き起こし、ランダムなクラッシュの原因となるかもしれません。
# 変数型を引数とするジェネリック型（例えば List<int>、 List<SomeStruct>、 List<SomeEnum>、その他）をseriazableスクリプトプロパティで使用している場合
# マネージド コード ストリッピング が有効であるときに Reflection を使用している場合
# ネイティブ プラグイン インタフェースでのエラー（マネージド コード メソッド シグニチャ が ネイティブコード関数のシグニチャと一致しない場合）
XCodeデバッガコンソールからの情報により問題を特定しやすくなります（XCodeメニュー:  ``View > Debug Area > Activate Console``）。

!! Xcode コンソールが "Program received signal:  &#8220;SIGBUS&#8221; " または "EXC_BAD_ACCESS" エラーを表示する
このメッセージは通常NullReferenceExceptionを受け取ったiOSデバイスで表示されます。どこで問題が発生したかを判断する方法は二つあります:

!!!! マネージされたスタックトレース
バージョン3.4以降、UnityはNullReferenceException でのソフトウェアによるハンドリングを含みます。AOTコンパイラは、オブジェクトでメソッドまたは変数がアクセスされるたびに、Null Referenceをクイックにチェックします。この機能はスクリプト パフォーマンスに影響するため開発ビルドでのみ有効化されています（ベーシック ライセンスのユーザにとっては Build Settings ダイアログで"Development Build" オプションを有効化するので十分ですが、iOS Proライセンス ユーザは追加で "Script Debugging" を有効化する必要あります）。
もし全てが正しく行われていて、不具合の原因が .NETコードで発生している場合、 EXC_BAD_ACCESS が出なくなります。その代わりに .NET例外メッセージがXCode コンソールで出力されます（そうでなければコードは "catch" ステートメントでハンドリングします）。典型的な出力内容としては：
[@
Unhandled Exception: System.NullReferenceException: A null value was found where an object instance was required.
  at DayController+$handleTimeOfDay$121+$.MoveNext () [0x0035a] in DayController.js:122 
@]

この場合、不具合が DayController クラスの 、コルーチンとして動作するhandleTimeOfDay メソッドで発生したことを示しています。さらにスクリプトのコードである場合、通常は行番号まで出力されます （例えば "DayController.js:122" ）。問題のある行は次のような内容かもしれません:

[@
 Instantiate(_imgwww.assetBundle.mainAsset);
@]

例えば、アセットバンドルが正しくダウンロードされたかチェックせずに、スクリプトによりアクセスされる場合などで発生するかもしれません。

!!!! ネイティブ スタックトレース
ネイティブ スタックトレースは、エラー調査においてより強力なツールですが、専門的な知識を必要とします。さらに、一般的にはネイティブ （物理メモリ アクセス）エラーが発生した後は継続することが出来ません。ネイティブ スタックトレースを取得するためには、XCodeデバッガ コンソールで ``bt all`` と入力して下さい。出力されたスタックトレースを注意深くみると、エラーがどこで起きたかのヒントが含まれます。次のような出力をみるかもしれません：
[@
...
Thread 1 (thread 11523): 
#0 0x006267d0 in m_OptionsMenu_Start () 
#1 0x002e4160 in wrapper_runtime_invoke_object_runtime_invoke_void__this___object_intptr_intptr_intptr () 
#2 0x00a1dd64 in mono_jit_runtime_invoke (method=0x18b63bc, obj=0x5d10cb0, params=0x0, exc=0x2fffdd34) at /Users/mantasp/work/unity/unity-mono/External/Mono/mono/mono/mini/mini.c:4487
#3 0x0088481c in MonoBehaviour::InvokeMethodOrCoroutineChecked ()
...
@]
最初に、 __"Thread 1"__ のスタックトレースが目につきますが、これがメインスレッドです。スタックトレースの一番初めの行がエラーの発生した場所を指しています。この例では、トレースは NullReferenceException が ''"OptionsMenu"'' スクリプトの ''"Start"'' メソッドで発生したことを示しています。注意深くこのメソッドの実装を眺めることで、この問題の原因が明らかになります。通常、NullReferenceException は ``Start`` メソッドのなかで、初期化の順番について間違った前提で設計をした場合などに発生します。
いくつかのケースでは部分的なスタックトレースのみがデバッガコンソールで表示いされます：
[@ 
Thread 1 (thread 11523): 
#0 0x0062564c in start ()
@]
これはネイティブのシンボルがアプリケーションの Release ビルドで取り除かれたことを示します。完全なスタックトレースは次の手順により取得できます:
* デバイスからアプリケーションを削除します
* 全てのターゲットをクリーンアップします
* ビルドおよび実行します
* スタックトレースを上記の手順どおりに取得します

!! 外部ライブラリがUnity iOS アプリケーションにリンクしたら EXC_BAD_ACCESS が発生する

これは外部ライブラリが ARM Thumb ライブラリ インストラクションつきでコンパイルされた場合に良く発生します。現時点では Unity はそういったライブラリと互換性がありません。Thumb  インストラクションを取り除いてリコンパイルすることで容易に解決できます。Xcodeプロジェクトでは次のステップで行います:
* Xcode でメニューから ''"View"'' > ''"Navigators"'' > ''"Show Project Navigator"'' を選択
*  ''"Unity-iPhone"'' プロジェクトを選択し、 ''"Build Settings"'' タブを有効化
* 検索フィールドで入力:  ''"Other C Flags"'' 
* そこに ''-mno-thumb'' フラグを追加、ライブラリをリビルド

もしライブラリ ソースが利用可能でない場合、サプライヤに Thumb なしバージョンを依頼すべきです。

!! Xcode コンソールで "WARNING -> applicationDidReceiveMemoryWarning()" が表示され、アプリケーションがすぐにクラッシュする
（ときどき ''Program received signal:  "0"'' といったメッセージが表示されます）
このワーニング メッセージはしばしば致命的でなく、単に iOS のメモリが少なくなっていて、アプリケーションにメモリを解放するように求めています。一般的にメールのようなバックグラウンド プロセスがメモリを解放して、自身のアプリケーションの実行を継続できます。しかし、アプリケーションが引き続きメモリ使用し、さらにメモリを求める場合は OS が最終的にアプリケーションの強制終了を始めて、自身のアプリもその対象となるかmおしれません。Appleはどういうメモリ使用法が安全であるかドキュメントに記載していませんが、経験的な観測結果によればデバイスのRAM（例えば第2世代目のiPadでは 200-256MB）の50%以下の消費で抑えるアプリケーションはメモリ使用での大きな問題はありません。
もっとも注視すべき指標はアプリケーションが使用するRAMです。アプリケーションのメモリ使用は次の3つの要素からなります:
* アプリケーションのコード（OSはアプリケーションコードをロードし保持する必要がありますが、本当に必要な場合は破棄されるかもしれません）
* ネイティブヒープ（ステート、アセット、その他をRAMに格納されるのにエンジンから使用されます）
* マネージド ヒープ（Mono ランタイムにより C# またJavaScriptを保持するのに使用されます）
* GLES ドライバメモリ プール: テクスチャ、フレームバッファ、コンパイルド シェーダ、その他
アプリケーションメモリ使用はXCode Instrumentsツールによりトラッキングできます: ``Activity Monitor`` 、 ``Object Allocations`` 、および``VM Tracker``。XcodeのRunメニューから開始できます:  ``Product > Profile`` から各ツールを選択します。 ``Activity Monitor`` ツールにより、アプリケーションが使用したRAMの総容量として捉えることのできる ``Real memory`` など、全てのプロセス統計が表示されます。 __注意:__ OS およびデバイス ハードウェアバージョンの組み合わせによりメモリ使用の数字が大きく影響を受けるかもしれないため、異なるデバイスで取得した数字を比較するときは注意すべきです。

Attach:ActivityMonitor.png 

__注意:__  [[iphone-InternalProfiler | 内部プロファイラ]] は .NET スクリプトにより割り当てされたヒープのみを表示します。メモリの総使用量は 前述のとおりXcode Instruments により判断できます。この指標にはアプリケーションの倍なるの一部、標準フレームワークバッファ、Unityエンジン内部のステートバッファ、.NETランタイム ヒープ（内部プロファイラにより出力される数字）、GLESドライバ ヒープ、およびその他様々なものを含みます。

その他のツールはアプリケーションにより割り当てされた全てを表示し、ネイティブヒープおよびマネージドヒープの両方の統計を含みます（ ``Created and still living`` を忘れずにチェックして、アプリケーションの現在の状態を取得して下さい）。重要な統計は ``Net bytes`` の値です。

Attach:ObjectAlloc.png

メモリ使用を低く抑えるためには:
* iOS ストリッピング オプション（Advanced ライセンス機能）を使用することで、 アプリケーション バイナリサイズを削減し、異なる .NET ライブラリでの不要な依存関係を回避して下さい。 詳細については [[class-PlayerSettings40|player settings]] および [[Main.iphone-playerSizeOptimization|player size optimization]] を参照下さい。
* コンテンツのサイズを削減してください。テクスチャでPVRTC圧縮を使用し、ローポリ モデルを使用して下さい。詳細については [[Main.ReducingFilesize|ファイルサイズ 削減]] を参照下さい。
* スクリプトで必要以上にメモリ割り当てをしないで下さい。Mono ヒープサイズおよび使用状況を [[Main.iphone-InternalProfiler|内部プロファイラ]] でトラッキングして下さい。
* __注意:__  Unity 3.0から、シーン ローディング実装が著しく変更となり、現在は全てのアセットはプリロードされています。この結果、ゲームオブジェクトをインスタンス化するときにパフォーマンスの一時的な低下が発生することがあります。ゲームでのアセットロード／アンロードについて完全に掌握する必要がある場合は [[ScriptRef:Resources.Load.html | Resources.Load]] および [[ScriptRef:Object.Destroy.html | Object.Destroy]] を使用すべきです。

OS に空きメモリについてクエリをかけるのはアプリケーションのパフォーマンスを評価するのに良い考えと思えるかもしれません。しかし、空きメモリ統計は信頼に足らないことが多く、それはOSが多くの動的バッファやキャッシュを使用するためです。唯一信用できるアプローチはアプリケーションのメモリ消費をトラッキングして、それを主要な指標とすることです。ツールでみたグラフが時間とともにどう変化するか、特に新しいレベルをロードするときは、注意を払って下さい

!! ゲームをXcodeから起動した場合は正しく動作するが、デバイスで手動により起動した場合は最初のレベルロードでクラッシュする
いくつか考えられる理由があります。デバイスログを点検して詳細を確認する必要があります。デバイスを Mac に接続して、Xcodeを起動してメニューから ``Window > Organizer`` を選択します。デバイスを Organizer の左ツールバーから選択し、"Console" タブをクリックし、最後のメッセージを注意深く確認します。さらに、クラッシュレポートを調べる必要があるかもしれません。クラッシュレポートの取得方法については次のリンクで確認下さい:  [[http://developer.apple.com/iphone/library/technotes/tn2008/tn2151.html]].

!! Xcode Organizer コンソールのメッセージに "killed by SpringBoard" が含まれている
ほとんどドキュメントにかかれてませんが、 iOS アプリケーションが最初のフレームをレンダリングして入力を処理するのに時間制限があります。もしアプリケーションがこの制限を越えると、 SpringBoard により強制終了されます。これは例えば最初のシーンが大きすぎる場合に発生するかもしれません。推奨として、スプラッシュスクリーンだけの小さい初期シーンを作成して、 $$yield$$ により１、２フレーム wait してから実際のシーンをロードさせます。これは次のような簡単なコードで実現できます:
[@ 
function Start () {
    yield;
    Application.LoadLevel("Test");
}
@]

!! Type.GetProperty() / Type.GetValue() がデバイスでのクラッシュを引き起こす
現在 ``Type.GetProperty()`` および ``Type.GetValue()`` は``.NET 2.0 Subset`` プロファイルでのみサポートされます。.NET API互換レベルは [[class-PlayerSettings40|Player Settings]] で選択できます。


__注意:__ ``Type.GetProperty()`` および ``Type.GetValue()`` はマネージド コード ストリッピングで互換性がなく、除外する必要があります（ストリッピング プロセスの再に、カスタムで非ストリッピング タイプのリストを提供して実現できます）。詳細については [[iphone-playerSizeOptimization|iOS プレーヤー サイズ最適化ガイド]] を参照下さい。

!! ゲームが次のエラーメッセージとともにクラッシュする "ExecutionEngineException: Attempting to JIT compile method 'SometType`1<SomeValueType>:.ctor ()' while running with --aot-only."

iOS 向けの Mono .NET 実装はAOT (ネイティブコードへの Ahead Of Time コンパイル) テクノロジーにもとづいていて、いくつか制約があります。これはジェネリック型のメソッド（値型変数がジェネリック変数として使用される場合）において、別のコードにより明示的に使用されている必要があるという制約です。もしそのようなメソッドが reflection またはネイティブコードのみ経由で使用されている場合（すなわち serialization システム）、AOTコンパイルの際にスキップされます。AOT コンパイラはスクリプトコードのどこかにダミーのメソッドを追加することでコードを include するよう指示させることができます。これは不足しているメソッドを参照させることが出来るので、Ahead Of Timeでのコンパイルが実現されます。
[@
void _unusedMethod()
{
    var tmp = new SomeType<SomeValueType>();
}
@]
__注意:__ 値型は基本的な enum や strucの型tです。

!!  System.Security.Cryptography および マネージド コード ストリッピングが使用されているときに様々なクラッシュがデバイス上で発生する
.NET Cryptography サービスは Reflectionに深く依存していて、このために静的なコード分析が絡むマネージド コード ストリッピングとは互換性がありません。クラッシュに関する最も簡単な解決策はしばしば、 ``System.Security.Crypography`` 名前空間の全体をストリッピング プロセスから取り除くことです。

カスタムの ``link.xml`` ファイルを ``Assets`` フォルダに追加することで ストリッピング プロセスはカスタマイズできます。これによりストリッピングから除外すべき型や名前空間を指定できます。詳細については [[iphone-playerSizeOptimization|iOS プレーヤー サイズ最適化ガイド]] を参照下さい。

!!! link.xml
[@
<linker>
       <assembly fullname="mscorlib">
               <namespace fullname="System.Security.Cryptography" preserve="all"/>
       </assembly>
</linker>

@]

!!! アプリケーションは System.Security.Cryptography.MD5 を マネージド コード ストリッピング とともに使用するときにクラッシュする
前述で記載したアドバイスに従うか、スクリプトコードに追加のリファレンスを特定のクラスに追加してして問題を回避できます:
[@
object obj = new MD5CryptoServiceProvider();
@]

!! "Ran out of trampolines of type 0/1/2" ランタイムエラー
このエラーは通常、再帰的なジェネリックをたくさん使用するときに発生します。AOTコンパイラに指示をして、より多くのtype0, type 1 または type 2 のトランポリンを割り当てることが出来ます。追加の AOT コンパイラ コマンドライン オプションは [[class-PlayerSettings40#iOS | Player Settings]] の "Other Settings" セクションで指定できます。type 1 のトランポリンについては、 ``nrgctx-trampolines=ABCD`` 、ここではABCDは新しく必要なトランポリンの数（すなわち 4096）、を指定してください。type 2 のトランポリンについては ``nimt-trampolines=ABCD`` を指定してください。type 0 のトランポリンについては、 ``ntrampolines=ABCD`` を指定してください。。

!! XCodewをアップグレードした後、 Unity iOS ランタイムが次のメッセージで失敗します "You are using Unity iPhone Basic. You are not allowed to remove the Unity splash screen from your game"
最新のXcodeリリースにおいて、PNG圧縮および最適化ツールに変更がありました。これらの変更によりスプラッシュスクリーン修正でのUnity iOSランタイムチェックで 誤った警告を引き起こすかもしれません。そのような問題に出くわしたときは Unity を最新の公開バージョンにアップグレードすることを試行してください。これで直らない場合、次のような回避策が考えられます:
* Xcode プロジェクトをUnityからビルドする際に（appendするのではなく）スクラッチから作り直します
* すでにデバイスでインストールされたプロジェクトを削除します
* Xcodeでプロジェクトをクリーンします (''Product''->''Clean'')
* Xcodeの Derived Data フォルダをクリアします (''Xcode''->''Preferences''->''Locations'')
これでもまだ直らない場合、XCode で PNG 再圧縮を無効化します:
* Xcodeプロジェクトを開きます
* そこで "Unity-iPhone" プロジェクトを選択します
* そこで "Build Settings" を選択
* "Compress PNG files" オプションを見つけて無効に設定します


!! App Store 提出が次のメッセージで失敗する:"iPhone/iPod Touch: application executable is missing a required architecture. At least one of the following architecture(s) must be present: armv6"
armv6サポートで提出された既存のアプリケーションを更新するときにそのようなメッセージがあるかもしれません。Unity 4.x および Xcode 4.5 は armv6 プラットフォームをもうサポートしていません。提出の問題を解決するには Unityの ``Player Settings`` で ``Target OS Version`` を ``4.3`` 以上に設定します。

!! WWWダウンロードがUnity EditorやAndoroidでは正しく動作するが、iOSでは失敗する
もっとも良くある間違いはWWWダウンロードが常に別スレッドで行われると仮定することです。いくつかのプラットフォームではこれは正しいですが、前提としてはいけません。WWWステータスをトラッキングするベストの方法は ''yield'' ステートメントをしようするか、 ''Update'' メソッドでステータスのチェックを行うことです。この場合に ''while'' ループはビジーとなるため使用しては__いけません__。

!! "PlayerLoop called recursively!" がスクリプトからのネイティブ関数コールを用いて Cocoa を使用した場合に発生する
UI でのいくつかの処理によって iOS がウィンドウを直ちに再描画することにつながります（最も良くあるケースはメインの UIWindow に UIViewController のある UIView を追加する場合です）。もしスクリプトからネイティブ関数コールを行うと UnityのPlayerLoop の中で行われ、結果的に PlayerLoop が再帰的に呼び出しされます。その場合、 [[http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/Reference/Reference.html#//apple_ref/occ/instm/NSObject/performSelectorOnMainThread:withObject:waitUntilDone: | performSelectorOnMainThread]] メソッドを使用して、あわせて waitUntilDone をfalseにしておくことを検討すべきです。これにより Unity の PlayerLoopコール の間に処理実行されるようなスケジューリングをiOSに伝達されます。

!! プロファイラまたはデバッガにより iOSデバイスで実行されているゲームをみることが出来ない
* Developmentビルドを作成していること、 "Enable Script Debugging"  および "Autoconnect profiler" が適切に設定されていることを確認します
* デバイスで実行されているアプリケーションは 225.0.0.222 の UDP ポート番号 54997 に対するマルチキャスト ブロードキャストを行います。ネットワーク設定によりこの通信が許可されていることをチェックします。次に、プロファイラがリモートデバイスのポート番号 55000 - 55511 の範囲で接続を行いデバイスからプロファイラ データをフェッチします。これらのポートは UDP アクセスのためにオープンである必要があります

!! DLLが見つからない
もしアプリケーションがエディタでは動作するが iOS プロジェクトでエラーが出る場合、DLLが見つからないことが原因かもしれません（例えば I18N.dll、 I19N.West.dll）。この場合、これらのDLLを Unity.app から プロジェクトの Assets/Plugins フォルダへコピーしてみて下さい。Unityアプリケーションの中でのDLL の場所は:
 Unity.app/Contents/Frameworks/Mono/lib/mono/unity 
さらにプロジェクトのストリッピングレベルをチェックして、ビルドが最適化されたときに DLL のクラスが取り除かれないことを保証すべきです。iOS ストリッピング レベルの詳細については [[iphone-playerSizeOptimization | iOS 最適化ページ ]] を参照下さい。

!! Xcode デバッガ コンソール出力が:ExecutionEngineException: Attempting to JIT compile method '(wrapper native-to-managed) Test:TestFunc (int)' while running with --aot-only

通常、このようなメッセージは、マネージド関数デリゲートがネイティブ関数に渡したが、必要なラッパーコードがアプリケーションをビルドした際に生成されなかった場合に発生します。どのメッセージがデリゲートとしてネイティブ関数に渡されるか、AOT コンパイラに指示をすることが出来ます。これはカスタム属性として  "MonoPInvokeCallbackAttribute" を追加することで実現できます。現在静的メソッドのみをデリゲートとしてネイティブ関数に渡すことが出来ます。

サンプル コード:
[@
using UnityEngine;
using System.Collections;
using System;
using System.Runtime.InteropServices;
using AOT;

public class NewBehaviourScript : MonoBehaviour {

	[DllImport ("__Internal")]
	private static extern void DoSomething (NoParamDelegate del1, StringParamDelegate del2);

	delegate void NoParamDelegate ();
	delegate void StringParamDelegate (string str);
	
	[MonoPInvokeCallback (typeof (NoParamDelegate))]
	public static void NoParamCallback()
	{
		Debug.Log ("Hello from NoParamCallback");
	}
	
	[MonoPInvokeCallback (typeof (StringParamDelegate))]
	public static void StringParamCallback(string str)
	{
		Debug.Log (string.Format ("Hello from StringParamCallback {0}", str));
	}

	// 初期化
	void Start () {
		DoSomething(NoParamCallback, StringParamCallback);
	}
}
@]

!! Xcode throws compilation error: "ld : unable to insert branch island. No insertion point available. for architecture armv7", "clang: error: linker command failed with exit code 1 (use -v to see invocation)"
このエラーは通常、ひとつのモジュールにコードが多すぎることを意味します。典型的には多くのスクリプトコードがあること、または大きな .NET アセンブリがビルドに含まれることに起因します。そしてスクリプト デバッギング を有効化することで状況はさらに悪化するかもしれず、いくつかの追加指示を各々の関数に加えるため、より多くに制限にヒットするようになります。

この問題の解決にはマネージド コード ストリッピングを有効化することで役立つ場合があり、特に おおきな.NET アセンブリがカラム場合です。しかし、もしこの問題が継続的に発生する場合、もっとも良い解決策はユーザのスクリプトのコードを複数のアセンブリに分割することです。その最も簡単な方法はコードを ``Plugins`` フォルダに移動することです。この場所にあるコードは別のアセンブリに含まれます。さらにこれらのスクリプト コンパイル ガイドラインもチェックして下さい：

[[ScriptRef:index.Script_compilation_28Advanced29.html|Script Compilation]]

>><<
[[#AndroidTroubleShooting]]
!Android!
>>android<<
! Android 開発トラブルシューティング
!! "No Platforms Found" エラー:

# 現在の Android SDK をアンインストールしたうえ、複数ないことを確認します。
# Java を安定バージョンでアップデート。最新版はコンフリクトありませんが、過去はユーザがトラブルを経験したことがあることに留意して下さい。
# 最新の ADT バンドルをダウンロードして、説明にしたがってインストールします。これにより正しくデベロッパー ツールがインストールされます: http://developer.android.com/sdk/index.html
# インストールした Android SDK に対してUnity を設定します。

!! Unity がデバイスへのアプリケーション インストールに失敗する
# コンピュータから実際にデバイスがみれて通信できることをチェックして下さい。詳細については [[Main.PublishingBuilds | ビルドのパブリッシュ]] を参照下さい。
# Unityコンソールでのエラーメッセージをチェックして下さい。通常、これにより問題の診断がしやすくなります。

もしエラーメッセージで、ビルドの際に "Unable to install APK, protocol failure" と表示される場合、これはデバイスが低電力USBポート（例えばキーボードやその他周辺機器向け）に接続されていることを示します。これが発生した場合、コンピュータに直付けされているUSBポートへのつなぎなおしてください。

!! 起動直後にアプリケーションがクラッシュする
# 未サポートのデバイスで [[class-PlayerSettings40#Android | NativeActivity]] を使用していないか再確認します
# ネイティブのプラグインを外します
# ストリッピングを無効化します
# $$adb logcat$$ を使用してデバイスからクラッシュレポートを取得します

!! Building DEX で失敗
次のようなエラーメッセージが表示されることがあります:-
[@
Building DEX Failed!
G:\Unity\JavaPluginSample\Temp/StagingArea> java -Xmx1024M 
-Djava.ext.dirs="G:/AndroidSDK/android-sdk_r09-windows\platform-tools/lib/" 
-jar "G:/AndroidSDK/android-sdk_r09-windows\platform-tools/lib/dx.jar" 
--dex --verbose --output=bin/classes.dex bin/classes.jar plugins
Error occurred during initialization of VM
Could not reserve enough space for object heap
Could not create the Java virtual machine.
@]

これは通常、マシンに間違った Java バージョンにより引き起こされます。Javaインストールを最新バージョンにすることで一般的にはこの問題は解決されます。

!! ビデオ再生の際に数秒後にクラッシュする
@Settings->Developer Options->Don't keep activities@@ が電話上で有効化されてないことを確認します。ビデオプレーヤーはそのものがアクティビティであり、したがって、通常のゲームアクティビティは、ビデオプレーヤーが有効であると破棄されます。

!! スリープ ボタンを押したときにゲームが終了する
@@AndroidManifest.xml@@ で @@<activity>@@ タグを変更して @@<android:configChanges>@@ を含むようにします。詳細は [[http://developer.android.com/guide/topics/manifest/activity-element.html#config | ここ]] を参照下さい

サンプルのアクティビティ タグは次のようなものです:-

[@
<activity android:name=".AdMobTestActivity"
                  android:label="@string/app_name"
                  android:configChanges="fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
@]

>><<
