! エディタ ウィンドウ / Editor Windows

アプリケーションの中でカスタム ウィンドウを作成する数に制限はありません。インスペクタ、シーン、あるいは他のビルトインと同様に動作します。ゲームのサブシステムにユーザ インタフェースを追加するにはとても良い方法です。

Attach:CustomEditorWindow.png\\
''Serious Games Interactive 社による提供のカットシーンのアクションをスクリプティングするのに使用 カスタム エディタ インタフェース''

次の簡単な手順でカスタム エディタ ウィンドウを作成します：
* エディタ ウィンドウから派生したスクリプトを作成する
* ウィンドウ自身を表示するコードをトリガーする
* 自身のツールで GUI コードを実装

!!! Derive From EditorWindow から派生
エディタ ウィンドウを作成するためにはスクリプトが "Editor" という名前のフォルダに格納されている必要があります。スクリプトの中に EditorWindow から派生したクラスを作成します。次に内部の OnGUI 関数を制御する GUI コントロールを記述します。

[@
// JavaScript サンプル
class MyWindow extends EditorWindow {
    function OnGUI () {
        // 実際のウィンドウ コードをここに記述
    }
}


// C# サンプル
public class MyWindow : EditorWindow {
	void OnGUI() {
        // 実際のウィンドウ コードをここに記述
	}
}
@]


!!! ウィンドウの表示
画面上でウィンドウを表示するには、表示するためのメニュー アイテムを作成します。これは $$MenuItem$$ プロパティにより起動される関数を
作成します。

Unity でのデフォルトの動作ではウィンドウを再利用することです（つまりメニュー アイテムを再選択すると既存ウィンドウを表示します。これは [[ScriptRef:EditorWindow.GetWindow.html | EditorWindow.GetWindow]] を使用します）。次のとおりに実現できます：
[@
// JavaScript サンプル
class MyWindow extends EditorWindow {
    @MenuItem ("Window/My Window")
    static function ShowWindow () {
        EditorWindow.GetWindow (MyWindow);
    }

    function OnGUI () {
        // 実際のウィンドウ コードをここに記述
    }
}


// C# サンプル
public class MyWindow : EditorWindow {
	[MenuItem("Window/My Window")]
	static void ShowWindow() {
		EditorWindow.GetWindow(typeof(MyWindow));
	}
	
	void OnGUI () {
        // 実際のウィンドウ コードをここに記述
	}
}
@]


これにより標準的でドッキング可能、かつ実行されるたびに位置を保存するエディタウィンドウが作成され、カスタムレイアウト等に使用できます。作成する内容をさらに制御するには [[ScriptRef:EditorWindow.GetWindowWithRect.html | GetWindowWithRect]] を使用できます。

!!! ウィンドウの GUI を実装する

ウィンドウの実際の内容は OnGUI 関数を実装することでレンダリングされます。ゲーム内の GUI  (``GUI`` および ``GUILayout``)が使用するものと同じ UnityGUI クラスを使用します。それに加えてさらに追加できる GUI コントロールがあり、エディタのみの クラス ``EditorGUI`` および ``EditorGUILayout`` に含まれます。通常のクラスの既存コントロールに新たなクラスを追加することで、自由に組み合わせることができます。

次のコードにより GUI 要素をカスタム エディタ ウィンドウに追加する方法を示します：
[@
// JavaScript サンプル

class MyWindow extends EditorWindow {
	var myString = "Hello World";
	var groupEnabled: boolean;
	var myBool = true;
	var myFloat = 1.23;
	
	// "My Window" というメニューアイテムをウィンドウ メニューに追加
	@MenuItem("Window/My Window")
	static function ShowWindow() {
		//既存のウィンドウ インスタンスを表示。ない場合は新たに作成
		EditorWindow.GetWindow(MyWindow);
	}
	
	function OnGUI() {
		GUILayout.Label ("Base Settings", EditorStyles.boldLabel);
		myString = EditorGUILayout.TextField ("Text Field", myString);
        
		groupEnabled = EditorGUILayout.BeginToggleGroup ("Optional Settings", groupEnabled);
			myBool = EditorGUILayout.Toggle ("Toggle", myBool);
			myFloat = EditorGUILayout.Slider ("Slider", myFloat, -3, 3);
		EditorGUILayout.EndToggleGroup ();
	}
}


// C# サンプル
using UnityEditor;
using UnityEngine;

public class MyWindow : EditorWindow
{
	string myString = "Hello World";
	bool groupEnabled;
	bool myBool = true;
	float myFloat = 1.23f;
	
	// "My Window" というメニューアイテムをウィンドウ メニューに追加
	[MenuItem("Window/My Window")]
	public static void ShowWindow()
	{
		//既存のウィンドウ インスタンスを表示。ない場合は新たに作成
		EditorWindow.GetWindow(typeof(MyWindow));
	}
	
	void OnGUI()
	{
		GUILayout.Label ("Base Settings", EditorStyles.boldLabel);
		myString = EditorGUILayout.TextField ("Text Field", myString);
        
		groupEnabled = EditorGUILayout.BeginToggleGroup ("Optional Settings", groupEnabled);
			myBool = EditorGUILayout.Toggle ("Toggle", myBool);
			myFloat = EditorGUILayout.Slider ("Slider", myFloat, -3, 3);
		EditorGUILayout.EndToggleGroup ();
	}
}
@]

このサンプルの結果として次のようなウィンドウが表示されます：
Attach:ExampleEditorWindow.png\\
''サンプルにより作成されたカスタム エディタ ウィンドウ''


詳細については、 [[ScriptRef:EditorWindow.html | エディタ ウィンドウのページ]] にあるサンプルとドキュメンテーションを参照して下さい。
