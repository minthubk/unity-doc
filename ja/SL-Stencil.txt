! ShaderLab文法：ステンシル / ShaderLab syntax: Stencil

ステンシル バッファの主な使用方法はピクセル マスクごとにピクセルの保存または破棄することです。

ステンシル バッファは通常ピクセル毎の 8 ビット整数です。値は書き込み、増減ともに可能です。後続のドローコールを値に対してテストし、ピクセルシェーダを実行する前にピクセルが破棄されるべきか判断できます。

!! 文法

:Ref ''referenceValue'': 比較対象の値（Comp が ''always'' 以外の場合）かつ/またはバッファに書き込む値（Pass, Fail, ZFail のいずれかの場合置き換えられる）。0 - 255 の範囲の整数。
:ReadMask ''readMask'': 0 - 255 の範囲の整数で 8 ビットマスク、バッファのコンテンツで参照値を比較するのに用いられる（''referenceValue'' および ''readMask''） ''comparisonFunction'' (''stencilBufferValue'' および ''readMask''). デフォルト値: ''255''.
:WriteMask ''writeMask'': バッファ書き込みに使用される 0 - 255 の範囲の整数で 8 ビットマスク。デフォルト値: ''255''.
:Comp ''comparisonFunction'': バッファの現在のコンテンツを参照値と比較するために使用する関数。デフォルト値: ''always''
:Pass ''stencilOperation'': ステンシル テスト（およびデプス テスト）が成功した後のバッファ コンテンツの扱い。デフォルト: ''keep''
:Fail ''stencilOperation'': ステンシル テストが失敗した後のバッファ コンテンツの扱い。デフォルト: ''keep''
:ZFail ''stencilOperation'': ステンシル テストが成功したがデプス テストが失敗した後のバッファ コンテンツの扱い。デフォルト: ''keep''

''Cull Front'' が指定されてないかぎり Comp, Pass, Fail, ZFail は前面にある物体に適用され、指定されている場合はバックフェースの物体です。明示的に二面のステンシル状態を指定するには CompFront, PassFront, FailFront, ZFailFront (フロント フェースの物体), CompBack, PassBack, FailBack, ZFailBack (バックフェースの物体)とします。

!!!比較の関数
比較の関数は次のいずれかを使用できます：
||__Greater__ ||参照値がバッファ値より大きい参照値のピクセルのみレンダリング||
||__GEqual__ ||参照値がバッファ値と等しいまたは大きい参照値のピクセルのみレンダリング||
||__Less__ ||参照値がバッファ値より小さい参照値のピクセルのみレンダリング||
||__LEqual__ ||参照値がバッファ値と等しいまたは小さい参照値のピクセルのみレンダリング||
||__Equal__ ||参照値がバッファ値と等しい参照値のピクセルのみレンダリング||
||__NotEqual__ ||参照値がバッファ値と等しくない参照値のピクセルのみレンダリング||
||__Always__ ||常にステンシル テストは成功||
||__Never__ ||常にステンシル テストは失敗||

!!!ステンシル処理
ステンシル処理は次のいずれかを使用できます：
||__Keep__ ||バッファの現在コンテンツを保持します||
||__Zero__ ||バッファにゼロを書き込みます||
||__Replace__ ||参照値をバッファに書き込みます||
||__IncrSat__ ||バッファの現在値を増分させる。値がすでに 255 の場合は維持する||
||__DecrSat__ ||バッファの現在値を減分させる。値がすでに 0 の場合は維持する
||__Invert__ ||すべてのビットを無効にする||
||__IncrWrap__ ||バッファの現在値を増分する。値がすでに 255 の場合は 0 にする||
||__DecrWrap__ ||バッファの現在値を減分する。値がすでに 0 の場合は 255 にする||

!! ディファード レンダリング パス
ディファード レンダリング パスにおいて、レンダリングされたオブジェクトのステンシル機能は、他の目的でステンシル バッファがベース パスおよびライティングパスの際において、限定されています。これらの二つのステージにおいてシェーダのステンシル状態はは無視され、最終パスにおいてのみ考慮されます。このためこれらのオブジェクトをステンシル テストにもとづきオブジェクトをマスキングして外すことはできませんが、それでもバッファコンテンツを修正して、後続のフレームでオブジェクトにより使用できます。ディファード レンダリング パスの後にフォワード レンダリング パスでレンダリングされるオブジェクト（例．透明オブジェクトまたはサーフェイスシェーダのないオブジェクト）は再度、通常どおりにステンシル状態をセットします。

ディファード レンダリング パスは、シーンで使用されているライトマスク レイヤーの数にもとづき、ステンシルバッファのもっとも高い 3 つのビットを使用し、最大で 4 つのもっとも高いビットを使用します。ステンシルの読み取りおよび書き込みマスクを使用して"クリーンな" ビットの範囲で処理するか、カメラが強制的にライティングパスの後にステンシル バッファをクリーンするように Camera.clearStencilAfterLightingPass を使用できます。

!! サンプル
最初のシェーダのサンプルでは、デプス テストの結果に関わらず 2 という値を書き込み（ステンシル テストは必ず成功する設定）、デプス テストが失敗した場合に現在の値を 255 に減分（および折り返し）します（ただし、ステンシル バッファがクリアされた状態で開始している前提）。

[@Shader "Red" {
	SubShader {
		Tags { "RenderType"="Opaque" "Queue"="Geometry"}
		Pass {
			Stencil {
				Ref 2
				Comp always
				Pass replace
				ZFail decrWrap
			}
		
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			struct appdata {
				float4 vertex : POSITION;
			};
			struct v2f {
				float4 pos : SV_POSITION;
			};
			v2f vert(appdata v) {
				v2f o;
				o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
				return o;
			}
			half4 frag(v2f i) : COLOR {
				return half4(1,0,0,1);
			}
			ENDCG
		}
	} 
}
@]

ふたつめのシェーダは、 2 の値と等しいかチェックしているため、最初（赤）のシェーダが成功したピクセルのみで成功します。またステンシル テストが失敗したところではバッファの値を減分します。

[@Shader "Green" {
	SubShader {
		Tags { "RenderType"="Opaque" "Queue"="Geometry+1"}
		Pass {
			Stencil {
				Ref 2
				Comp equal
				Pass keep 
				Fail decrWrap 
				ZFail keep
			}
		
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			struct appdata {
				float4 vertex : POSITION;
			};
			struct v2f {
				float4 pos : SV_POSITION;
			};
			v2f vert(appdata v) {
				v2f o;
				o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
				return o;
			}
			half4 frag(v2f i) : COLOR {
				return half4(0,1,0,1);
			}
			ENDCG
		}
	} 
}
@]

三つめのシェーダはステンシル値が二回減分されたところのみ成功となり、ピクセルにおいては、最初（赤）のシェーダで失敗して二つめ（緑）のシェーダのステンシルテストも失敗した場合です。

[@Shader "Blue" {
	SubShader {
		Tags { "RenderType"="Opaque" "Queue"="Geometry+2"}
		Pass {
			Stencil {
				Ref 254
				Comp equal
			}
		
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			struct appdata {
				float4 vertex : POSITION;
			};
			struct v2f {
				float4 pos : SV_POSITION;
			};
			v2f vert(appdata v) {
				v2f o;
				o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
				return o;
			}
			half4 frag(v2f i) : COLOR {
				return half4(0,0,1,1);
			}
			ENDCG
		}
	}
}
@]

結果:
Attach:StencilExample.png


もうひとつのエフェクトのサンプル。球体は最初にこのシェーダでレンダリングされてステンシル バッファの正しい領域をマークします：

[@Shader "HolePrepare" {
	SubShader {
		Tags { "RenderType"="Opaque" "Queue"="Geometry+1"}
		ColorMask 0
		ZWrite off
		Stencil {
			Ref 1
			Comp always
			Pass replace
		}

		CGINCLUDE
			struct appdata {
				float4 vertex : POSITION;
			};
			struct v2f {
				float4 pos : SV_POSITION;
			};
			v2f vert(appdata v) {
				v2f o;
				o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
				return o;
			}
			half4 frag(v2f i) : COLOR {
				return half4(1,1,0,1);
			}
		ENDCG

		Pass {
			Cull Front
			ZTest Less
		
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			ENDCG
		}
		Pass {
			Cull Back
			ZTest Greater
		
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			ENDCG
		}
	} 
}
@]

標準的なサーフェイスシェーダとして、さらにもう一回レンダリングされます。例外はピクセル毎にフロント フェース カリングの場合と、デプステストとステンシルを無効化してマーキングした場合です：

[@Shader "Hole" {
	Properties {
		_Color ("Main Color", Color) = (1,1,1,0)
	}
	SubShader {
		Tags { "RenderType"="Opaque" "Queue"="Geometry+2"}

		ColorMask RGB
		Cull Front
		ZTest Always
		Stencil {
			Ref 1
			Comp notequal 
		}

		CGPROGRAM
		#pragma surface surf Lambert
		float4 _Color;
		struct Input {
			float4 color : COLOR;
		};
		void surf (Input IN, inout SurfaceOutput o) {
			o.Albedo = _Color.rgb;
			o.Normal = half3(0,0,-1);
			o.Alpha = 1;
		}
		ENDCG
	} 
}
@]

結果:
Attach:StencilExample2.png
