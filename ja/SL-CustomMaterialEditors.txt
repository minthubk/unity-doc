! カスタム マテリアルエディタ / Custom Material Editors

シェーダを使用する場合に、興味深いデータタイプがあり、Unity ビルトイン シェーダで綺麗に再現できる場合があります。Unityにはデフォルトのマテリアル インスペクタを自身で定義できるようにオーバライドできる方法が用意されています。この機能を用いてカスタムのコントロールおよびデータ範囲のバリデーションをを定義できます。

カスタムのマテリアル エディタを記述する最初の部分は、 [[SL-CustomEditor|カスタム エディタ]] を必要とするシェーダを定義することです。カスタム エディタで使用する名前は Unity でマテリアルエディタをルックアップするときのクラス名です。

カスタム エディタを定義するには、MaterialEditor クラスを拡張し、スクリプトを Assets ディレクトリの中の Editor フォルダにスクリプトを配置します。

[@
using UnityEditor;

public class CustomMaterialInspector : MaterialEditor {
	public override void OnInspectorGUI () {
		base.OnInspectorGUI ();
	}
}
@]

カスタム エディタを定義した全てのシェーダ(__CustomEditor "CustomMaterialInspector"__) はエディタを上でリストされているのを見つけて、紐づくコードを実行します。

!! 実際のサンプル
シェーダが二つのモードで動作するような状況があると仮定します。標準の拡散ライティングでレンダリングするか、ソース テクスチャの赤コンポーネントのみをレンダリングするとします。これはシェーダのマルチコンパイルにより実現できます。

(:code:)
[@Shader "Custom/Redify" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
	}
	SubShader {
		Tags { "RenderType"="Opaque" }
		LOD 200
		
		CGPROGRAM
		#pragma surface surf Lambert
		#pragma multi_compile REDIFY_ON REDIFY_OFF

		sampler2D _MainTex;

		struct Input {
			float2 uv_MainTex;
		};

		void surf (Input IN, inout SurfaceOutput o) {
			half4 c = tex2D (_MainTex, IN.uv_MainTex);
			o.Albedo = c.rgb;
			o.Alpha = c.a;

#if REDIFY_ON
			o.Albedo.gb = (o.Albedo.g + o.Albedo.b) / 2.0;
#endif
		}
		ENDCG
	} 
	FallBack "Diffuse"
	CustomEditor "CustomMaterialInspector"
}
@]

見て分かるようにシェーダは二つのキーワードが設定で利用可能です: REDIFY_ON および REDIFY_OFF です。これらはマテリアル ベースに変更するにはマテリアルの shaderKeywords プロパティを使用出来ます。以下でこれを行うエディタを示します。

[@
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.Linq;

public class CustomMaterialInspector : MaterialEditor {

	public override void OnInspectorGUI ()
	{
		// デフォルト インスペクタをレンダリング
		base.OnInspectorGUI ();

		// 非表示の場合は return
		if (!isVisible)
			return;

		// マテリアルの現在のキーワードを取得
		Material targetMat = target as Material;
		string[] keyWords = targetMat.shaderKeywords;

		// redify がセットされているか確認し、チェックボックスを表示
		bool redify = keyWords.Contains ("REDIFY_ON");
		EditorGUI.BeginChangeCheck();
		redify = EditorGUILayout.Toggle ("Redify material", redify);
		if (EditorGUI.EndChangeCheck())
		{
			// もしチェックボックスが変更されていればシェーダキーワードをリセット
			var keywords = new List<string> { redify ? "REDIFY_ON" : "REDIFY_OFF"};
			targetMat.shaderKeywords = keywords.ToArray ();
			EditorUtility.SetDirty (targetMat);
		}
	}
}
@]


!! デフォルトのマテリアル エディタが動作する方法
デフォルトの Unity エディタはシェーダに存在する全てのプロパティをマテリアル エディタにレンダリングします。以下のカスタムマテリアル エディタは Unity マテリアルエディタと同様の動作をします。手動でデフォルトのフィールドをレンダリングしたい場合は次のサンプルを使用します。

[@
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.Linq;

public class CustomMatInspector : MaterialEditor {

	// これは ShaderProperty 関数と同様、ここでどのようにthis is the same as the ShaderProperty function, show here so 
	// 動作するか確認できるように表示
	private void ShaderPropertyImpl(Shader shader, int propertyIndex)
	{
		int i = propertyIndex;
		string label = ShaderUtil.GetPropertyDescription(shader, i);
		string propertyName = ShaderUtil.GetPropertyName(shader, i);
		switch (ShaderUtil.GetPropertyType(shader, i))
		{
			case ShaderUtil.ShaderPropertyType.Range: // float ranges
			{
				GUILayout.BeginHorizontal();
				float v2 = ShaderUtil.GetRangeLimits(shader, i, 1);
				float v3 = ShaderUtil.GetRangeLimits(shader, i, 2);
				RangeProperty(propertyName, label, v2, v3);
				GUILayout.EndHorizontal();

				break;
			}
			case ShaderUtil.ShaderPropertyType.Float: // floats
			{
				FloatProperty(propertyName, label);
				break;
			}
			case ShaderUtil.ShaderPropertyType.Color: // colors
			{
				ColorProperty(propertyName, label);
				break;
			}
			case ShaderUtil.ShaderPropertyType.TexEnv: // textures
			{
				ShaderUtil.ShaderPropertyTexDim desiredTexdim = ShaderUtil.GetTexDim(shader, i);
				TextureProperty(propertyName, label, desiredTexdim);

				GUILayout.Space(6);
				break;
			}
			case ShaderUtil.ShaderPropertyType.Vector: // vectors
			{
				VectorProperty(propertyName, label);
				break;
			}
			default:
			{
				GUILayout.Label("ARGH" + label + " : " + ShaderUtil.GetPropertyType(shader, i));
				break;
			}
		}
	}

	public override void OnInspectorGUI ()
	{
		serializedObject.Update ();
		var theShader = serializedObject.FindProperty ("m_Shader");	
		if (isVisible && !theShader.hasMultipleDifferentValues && theShader.objectReferenceValue != null)
		{
			float controlSize = 64;

			EditorGUIUtility.LookLikeControls(Screen.width - controlSize - 20);

			EditorGUI.BeginChangeCheck();
			Shader shader = theShader.objectReferenceValue as Shader;

			for (int i = 0; i < ShaderUtil.GetPropertyCount(shader); i++)
			{
				ShaderPropertyImpl(shader, i);
			}

			if (EditorGUI.EndChangeCheck())
				PropertiesChanged ();
		}
	}
}

@]

