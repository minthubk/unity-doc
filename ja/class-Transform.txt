! トランスフォーム / Transform

$$Transform$$ コンポーネントは、シーン内のすべてのオブジェクトの実際の「Position」、「Rotation」および「Scale」を決定します。 オブジェクトはそれぞれトランスフォームを持ちます。

Attach:Inspector-Transform.png\\
''トランスフォーム コンポーネント は シーンビューおよびインスペクタで 編集できる''


!!プロパティ

||PROPS
||``Position`` ||X、Y、Z 座標でのトランスフォームの位置。 ||
||``Rotation`` ||X、Y、Z 軸周辺でのトランスフォームの回転 (単位:度)。 ||
||``Scale``    ||X、Y、Z 軸に沿ったトランスフォームのスケール。1の場合は、元の大きさになります (オブジェクトがインポートされた大きさ)。 ||

トランスフォームのプロパティはすべて、トランスフォームの親に対して相対的に設定されます（詳細は以下で参照下さい）。  トランスフォームに親がない場合、プロパティはワールド空間にもとづき設定されます。


!! トランスフォームの使用

トランスフォームは、X、Y、Z軸を使用して、3D 空間で操作されます。Unity では、これらの軸は、それぞれ赤色、緑色、青色で表示されます。  XYZ = RGBと覚えてださい。

Attach:TransformExample2.png\\
「3 つの軸間の色記号とトランスフォーム プロパティの関係」

トランスフォーム コンポーネントは、$$Scene View$$ またはインスペクタタ上のプロパティを編集して、直接操作できます。シーンでは、Move、Rotate およびScale ツールを使用して、トランスフォームを操作できます。  これらのツールは、Unity エディタの左上にあります。

Attach:Transform-Tools.png\\
「View、Translat、Rotate および Scale ツール」

これらのツールは、シーン内のどのオブジェクトにも使用できます。  オブジェクトをクリックすると、そこにツールのギズモが表示されます。  現在どのツールを選択しているかにより、このギズモの表示が若干異なります。

Attach:TransformGizmo35.png\\
\\
3 つのギズモはすべてシーン ビューで直接編集できます。

トランスフォームを操作するには、3 つのギズモの軸のいずれかをクリックして、ドラッグすると、色が変わります。  マウスをドラッグするのに合わせ、オブジェクトが軸に沿って、移動、回転または縮小拡大します。  マウス ボタンを放すと、軸が選択されたままになります。  マウスの中ボタンをクリックし、マウスをドラッグして、選択した軸に沿って、トランスフォームを操作できます。

Attach:TransformExample3.png\\
「個々の軸をクリックすると、選択されます」


!!! 親子関係

親子関係は、Unity を使用する際に理解する必要のある最も重要なコンセプトのひとつです。 GameObject が別の GameObject の $$Parent$$（親）の場合、$$Child$$（子）GameObject は、親とまったく同じように移動、回転、縮小拡大します。  体に付いている腕のように、体を回転させると、体に付いているため、腕も動きます。 どのオブジェクトにも複数の子がありますが、親は 1 つだけです。

$$Hierarchy View$$ 内の GameObject を別の GameObject にドラッグすることで、親を作成できます。 これにより、2 つの GameObject 間で親子関係が作成されます。

Attach:ParentingExample.png\\
「親子階層の例。  左の矢印で示されるすべての  GameObject は親です。」

上記の例では、体が腕の親になっており、腕は手の親になっています。 Unity で作成したシーンには、これらの $$Transform hierarchy$$ の集合が含まれます。 一番上の親オブジェクトは、$$Root object$$ と呼ばれます。 親を移動、縮小拡大または回転させると、そのトランスフォームでの変更はすべてその子にも適用されます。

子 GameObject のインスペクタでのトランスフォームの値は、親のトランスフォームの値に対し相対的に表示されるということはポイントです。これらは $$Local Coordinate$$（ローカル座標）と呼ばれます。  スクリプティングを通じて、ローカル座標の他、 $$Global Coordinate$$（グローバル座標）にもアクセスできます。

いくつかの別々のオブジェクトに親子関係を持たせることにより、人体模型の骸骨の構造のように、複合的なオブジェクトを作成できます。 また、シンプルな構造でも便利な効果得られます。例えば、舞台設定が夜中であるホラー ゲームで、懐中電灯を活用した場面を作りたいとします。このオブジェクトを作成するには、spotlightトランスフォームを懐中電灯トランスフォームの親にします。  これで、懐中電灯トランスフォームに変更を加えると、spotlightも変更され、リアルな懐中電灯の効果を生み出すことができます。


!! 不均等なScaleによるパフォーマンス問題や制限

不均等なScaleとは、トランスフォームにおける``Scale``がx、y、z方向で異なる値があるケースです（例：(2, 4, 2)）。対比となるのが均等であるScaleで、x、y、z方向で同じ値があるケースです（例：(3, 3, 3)）。均等でないScaleは限定されたケースでは便利かもしれませんが、通常は出来るかぎり避けるべきです。

不均等なScaleはレンダリングのパフォーマンスにマイナスのインパクトがあります。頂点法線を正しく変換するため、CPU上でメッシュを変換しデータの複製をします。通常はインスタンス間で共有されるメッシュはグラフィックスメモリに保持しますが、このケースではCPUとメモリ双方のコストがインスタンスごとに発生します。

Unityが不均等なScaleを扱う場合、特定の制限事項もあります。

* 特定のコンポーネントは不均等なScaleを完全にサポートしていません。例えば、``radius``プロパティがある場合、あるいは似たケースで$$Sphere Collider$$、$$Capsule Collider$$、 $$Light$$、$$Audio Source$$、等で不均等なScaleにしていたとしても形状は楕円にならず、円状/球状となります。

* 子オブジェクトが不均等なScaleの親を持ち、親に対して相対的に回転した場合、それは非直交配列になり、すなわち歪んで表示されることがあります。不均等なScaleをサポートするコンポーネントについても、非直行配列はサポートしていません。例えば、 $$Box Collider$$を歪ませることはできないため、不均等なScaleとした場合Box Colliderはレンダリングされたメッシュと正確にマッチしなくなります。

* パフォーマンスによる理由で、子オブジェクトがが不均等なScaleの親を持った場合、Scale/Matrixが回転時に自動反映されなくなります。Scaleの更新によっては、はじけるような動作となり、たとえばオブジェクトを親から切り離した場合に発生します。

!! スケールの重要性

トランスフォームのスケールは、モデリング アプリケーションのメッシュのサイズと、Unity でのメッシュのサイズ間の差分を決定します。 Unity でのメッシュのサイズ (およびトランスフォームのスケール)は、特に物理挙動のシミュレーション中には__非常に__重要になります。次の3つの要因によって、オブジェクトのスケールが決まります。
* 3D モデリング アプリケーションでのメッシュのサイズ。
* オブジェクトの $$Import Settings$$ での「Mesh Scale Factor」設定。
* トランスフォーム コンポーネントの「Scale」値。

理想的には、トランスフォームコンポーネントでのオブジェクトの「スケール」を調整する必要はありません。  実際のスケールでモデルを作成するため、トランスフォームのスケールを変更する必要がないというのが最高の選択肢です。  個々のメッシュに対して、$$Import Settings$$ にメッシュをインポートしたスケールを調整するのが、次に良い選択肢になります。インポート サイズに基づいて、一定の最適化が行われ、調整されたスケール値を持つオブジェクトをインスタンス化すると、パフォーマンスが下がる場合があります。詳細については、[[class-Rigidbody|Rigidbody]] コンポーネントのスケールの最適化に関する項目を参照してください。


!!ヒント

* トランスフォームのパレンディングを行う際、子を適用する前に、親の位置を <0,0,0> に置きます。  これにより、後で悩むケースを多々、未然防止できます。
* $$Particle System$$ は、トランスフォームの「Scale」の影響は受けません。 パーティクルシステムの縮小拡大を行うには、システムのパーティクルエミッタ、アニメータ、およびレンダラのプロパティを修正する必要があります。
* 物理挙動のシミュレーションに $$Rigidbodｙ$$ を使用する場合は、[[class-Rigidbody]] ページに記載されている Scale プロパティに関する重要な情報を参照してください。
*  ^^Unity Menu->Preferences->Colors & keys^^ から、トランスフォームの軸の色 (およびその他の UI 要素)を変更できます。
* Unityでのスケーリングを回避出来る場合は、そうしてください。  オブジェクトのスケールを 3D モデリング アプリケーション、またはメッシュの $$Import Settings$$ で完結するようにして下さい。
