!スプライト パッカー / Sprite Packer

スプライト画像をデザインするとき、各々のキャラクターごとに別のテクスチャファイルで作業すると便利です。しかしスプライト テクスチャの多くの部分はグラフィック要素の空白領域で占められるため、実行時の無駄なビデオメモリ消費となります。最適なパフォーマンスのためには複数のスプライト テクスチャ画像はアトラスと呼ばれるひとつのテクスチャで密接に配置することが大事です。Unity の $$Sprite Packer$$ により個別のスプライト テクスチャからアトラスを自動作成できます。

Unity はスプライト アトラス テクスチャの生成および使用を自動処理するためユーザが手動割り当てする必要がありません。アトラスはオプションで再生時またはビルド時にスプライト オブジェクトの画像はパッキングされアトラスを生成してそこから取得されるようになります。

テクスチャのパッキングを有効化するには、テクスチャ インポータで Packing Tag を指定する必要があります。

!!スプライトパッカーの使用

もしスプライトパッカー ウィンドウを開き (メニューから: ^^Window > Sprite Packer^^) 、左上隅の ^^Pack^^ ボタンをクリックすると、アトラスにパッキングされたテクスチャ配置が表示されます。

Attach:SpritePackerMain.png

Project パネルでスプライトを選択すると、アトラス上の位置がハイライトされます。アウトラインはレンダリング メッシュのアウトラインと一致し、密接なパッキングで使用される領域も定義します。

スプライトパッカー上部のツールバーにはパッキングおよび表示に関わるコントロールが複数あります。 ''Pack'' ボタンによりパッキング処理を初期化しますがアトラスが最後にパッキングされた以降の変更がなければ強制的に更新することはしません。（後の ''スプライトパッカーのカスタマイズ'' で説明しているとおりカスタムでパッキング ポリシーを実装した場合は ''Repack'' ボタンが表示されます。） ''View Atlas'' および ''Page #'' メニューによりウィンドウ上でどのアトラスのどのページを選択するか決めることが出来ます（最大テクスチャ サイズ で全てのスプライトの場所が不足する場合、ひとつのアトラスはひとつ以上の "ページ" に分割することが出来ます）。ページ番号の隣のメニューによりアトラスで使用する "パッキング ポリシー" を選択できます（以下、参照）。ツールバーの右にある二つのコントロールでビューをズームして、アトラスのカラーおよびアルファー表示の切り替えが出来ます。

エディタ設定 (メニュー: Edit > Project Settings > Editor)からスプライトパッカーを設定できます。Sprite Packer の Mode を ``Disabled``, ``Enabled for Builds`` (すなわち、パッキングはビルド時に使用され、再生時に使用しない) または ``Always Enabled`` (すなわち、パッキングはビルド時および再生時に使用する)と出来ます。

!!パッキング ポリシー

スプライトパッカーは ''Packing Policy'' によりスプライトをアトラスにどう割り当てるか決定します。カスタムのパッキングポリシーを作成できますが（以下、参照）、 ''Default Packer Policy'' オプションが常に利用可能です。このポリシーでは [[class-Texture2D|テクスチャ インポータ]] の ``Packing Tag`` プロパティはスプライトがパッキングされるアトラスの名前を直接選択するため、同じパッキング タグのスプライトは同じアトラスにパッキングされます。アトラスはさらにテクスチャのインポート設定により、ソーステクスチャにセットした内容と合致するようにソートされます。

!!スプライトパッカーのカスタマイズ

''DefaultPackerPolicy'' オプションが多くのケースで十分ですが、必要であればカスタムのパッキングポリシーを作成できます。エディタスクリプトのクラスで UnityEditor.Sprites.IPackerPolicy インタフェースを実装する必要があります。このインタフェースは次のメソッドを必要とします：

* GetVersion - パッキング ポリシーのバージョン値を返す。ポリシースクリプトに変更がある場合にバージョンは一つあげるべきであり、バージョン管理にこのポリシーが保存されます。
* OnGroupAtlases - パッキング ロジックをここに実装します。PackerJob でアトラスを定義し、与えられた TextureImporter からスプライトを割り当てます。

DefaultPackerPolicy はデフォルトで密接なパッキングをします（SpritePackingModeを参照して下さい）。カスタムのポリシーによりこれを上書きして代わりに矩形のパッキングを使用できます。テクスチャのエフェクトを使用する場合やスプライトのレンダリングで別のメッシュを使用したい場合にこれは役に立ちます。

* Repack ボタンはカスタムポリシーが選択された場合のみ有効化されます。
** TextureImporter メタデータあるいは選択された PackerPolicy バージョンの値が変更されるまで、OnGroupAtlases は 呼び出しされません。
** カスタムポリシーで作業する際は Repack ボタンを使用して下さい。
* スプライトは回転してパッキングできません。
** SpritePackingRotation は将来の Unity バージョンで予約されており現在は使用できません。


!!その他

* アトラスは Project\Library\AtlasCache. にキャッシュされてます。
** このフォルダを削除して Unity 起動するとアトラスは強制的に再パッキングされます。
* アトラスキャッシュは起動時にロードされません。
** 全てのテクスチャは Unity 再起動後の初回にパッキングのためにチェックされます。この処理はプロジェクトのテクスチャ総数により時間がかかる場合があります。
** 必要なアトラスのみロードされます。
* デフォルトの最大アトラス サイズは 2048x2048 です。
* PackingTag がセットされたときテクスチャは 圧縮されないため、 SpritePacker は元のピクセル値を取得してアトラス上で圧縮できます。

!!DefaultPackerPolicy
[@
using System;
using System.Linq;
using UnityEngine;
using System.Collections.Generic;

class DefaultPackerPolicy : UnityEngine.Sprites.IPackerPolicy
{
	private class Entry
	{
		public Sprite         sprite;
		public AtlasSettings  settings;
		public string         tag;
		public SpriteMeshType meshType;
	}

	public int GetVersion()
	{
		return 1;
	}

	public void OnGroupAtlases(BuildTarget target, PackerJob job, TextureImporter[] textureImporters)
	{
		List<Entry> entries = new List<Entry>();

		foreach (TextureImporter ti in textureImporters)
		{
			TextureImportInstructions ins = new TextureImportInstructions();
			ti.ReadTextureImportInstructions(ins, target);

			TextureImporterSettings tis = new TextureImporterSettings();
			ti.ReadTextureSettings(tis);

			Sprite[] sprites = AssetDatabase.LoadAllAssetsAtPath(ti.assetPath).Select(x => x as Sprite).Where(x => x != null).ToArray();
			foreach (Sprite sprite in sprites)
			{
				Entry entry = new Entry();
				entry.sprite = sprite;
				entry.settings.format = ins.desiredFormat;
				entry.settings.usageMode = ins.usageMode;
				entry.settings.colorSpace = ins.colorSpace;
				entry.settings.compressionQuality = ins.compressionQuality;
				entry.settings.filterMode = ti.filterMode;
				entry.settings.maxWidth = 2048;
				entry.settings.maxHeight = 2048;
				entry.tag = ti.spritePackingTag;
				entry.meshType = tis.spriteMeshType;

				entries.Add(entry);
			}
		}
		
		// 最初にスプライトを Packing Tag にもとづいてグループ分け
		var tagGroups =
			from e in entries
			group e by e.tag;
		foreach (var tagGroup in tagGroups)
		{
			int page = 0;
			// 次にグループをテクスチャ設定にもとづき、より細かくグループ分け
			var settingsGroups =
				from t in tagGroup
				group t by t.settings;
			foreach (var settingsGroup in settingsGroups)
			{
				string atlasName = string.Format("{0}", tagGroup.Key);
				if (settingsGroups.Count() > 1)
					atlasName += string.Format(" (Group {0})", page);
				
				job.AddAtlas(atlasName, settingsGroup.Key);
				foreach (Entry entry in settingsGroup)
				{
					SpritePackingMode packingMode = (entry.meshType == SpriteMeshType.Tight) ? SpritePackingMode.Tight : SpritePackingMode.Rectangle;
					job.AssignToAtlas(atlasName, entry.sprite, packingMode, SpritePackingRotation.None);
				}
				
				++page;
			}
		}
	}
}

@]
